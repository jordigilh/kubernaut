---
globs: "*_test.go,test/**/*"
description: "Testing strategy and patterns for kubernaut's pyramid approach with defense-in-depth"
---

# Testing Strategy for Kubernaut

## 🚨 **ENHANCED METHODOLOGY INTEGRATION**

**IMPORTANT**: This testing strategy integrates with the comprehensive AI assistant methodology.
See [00-ai-assistant-methodology-enforcement.mdc](mdc:.cursor/rules/00-ai-assistant-methodology-enforcement.mdc) for complete validation requirements.

**For '/fix-build' commands**: All testing must follow the enhanced validation approach with comprehensive TDD compliance.

## Pyramid Testing Approach
Kubernaut implements a **pyramid testing strategy** with **90% overall confidence** through extensive unit test coverage:

### Unit Tests (70%+ - AT LEAST 70% of ALL BRs) - **MAXIMUM COVERAGE FOUNDATION LAYER**
**Location**: [test/unit/](mdc:test/unit/)
**Purpose**: **EXTENSIVE business logic validation covering ALL unit-testable business requirements**
**Coverage Mandate**: **AT LEAST 70% of total business requirements, extended to 100% of unit-testable BRs**
**Confidence**: 85-90%
**Execution**: `make test`
**Strategy**: **Use real business logic with mocks ONLY for external dependencies - MAXIMIZE unit test coverage**

**CRITICAL EXPANSION PRINCIPLE**: Unit tests should cover **ALL business requirements that can be unit tested with external mock dependencies**, even if some requirements are also tested in integration or e2e testing (defense-in-depth). The 70% minimum is a floor, not a ceiling.

```go
// Example: Comprehensive business logic testing with real components
Describe("BR-WORKFLOW-001: Intelligent Workflow Generation", func() {
    var (
        // Mock ONLY external dependencies
        mockLLMProvider *mocks.MockLLMProvider
        mockK8sClient   *mocks.MockKubernetesClient
        mockVectorDB    *mocks.MockVectorDatabase

        // Use REAL business logic components
        workflowBuilder *engine.IntelligentWorkflowBuilder
        safetyFramework *platform.SafetyFramework
        analyticsEngine *insights.AnalyticsEngine
    )

    BeforeEach(func() {
        // Mock external/infrastructure dependencies ONLY
        mockLLMProvider = mocks.NewMockLLMProvider()
        mockK8sClient = mocks.NewMockKubernetesClient()
        mockVectorDB = mocks.NewMockVectorDatabase()

        // Create REAL business components
        safetyFramework = platform.NewSafetyFramework(realConfig)
        analyticsEngine = insights.NewAnalyticsEngine(realConfig)
        workflowBuilder = engine.NewIntelligentWorkflowBuilder(
            mockLLMProvider,    // External: AI service
            mockK8sClient,      // External: Infrastructure
            safetyFramework,    // Real: Business safety logic
            analyticsEngine,    // Real: Business analytics logic
        )
    })

    It("should generate workflows with comprehensive business validation", func() {
        // Test REAL business logic integration and algorithms
        workflow, err := workflowBuilder.CreateWorkflowFromAlert(ctx, alert)

        // Validate REAL business outcomes and logic
        Expect(workflow.Template.SafetyValidation).ToNot(BeNil())
        Expect(safetyFramework.ValidateWorkflow(workflow)).To(Succeed())
        Expect(analyticsEngine.AssessWorkflowRisk(workflow)).To(BeNumerically("<", 0.3))
    })
})
```

### Integration Tests (20% - 40-60 BRs) - **INTERACTION LAYER**
**Location**: [test/integration/](mdc:test/integration/)
**Purpose**: **Cross-component behavior and data flow validation**
**Confidence**: 80-85%
**Execution**: `make test-integration-kind` (Kind cluster) or `make test-integration-kind-ci` (CI with mocked LLM)
**Strategy**: **Focus on component interactions with real business logic**

```go
// Example: Cross-component integration with real business logic
Describe("BR-INTEGRATION-001: Workflow Engine Integration", func() {
    It("should integrate workflow generation with execution pipeline", func() {
        // Test real component integration
        workflow := workflowEngine.CreateWorkflow(ctx, alert)
        executionResult := executionEngine.ExecuteWorkflow(ctx, workflow)

        // Validate cross-component business outcomes
        Expect(executionResult.Status).To(Equal("completed"))
        Expect(executionResult.BusinessMetrics.SuccessRate).To(BeNumerically(">", 0.9))
    })
})
```

### E2E Tests (10% - 15-25 BRs) - **BUSINESS WORKFLOW LAYER**
**Location**: [test/e2e/](mdc:test/e2e/)
**Purpose**: **Complete end-to-end business workflow validation**
**Confidence**: 90-95%
**Execution**: `make test-e2e-ocp` (OpenShift) or `make test-e2e-kind` (Kind cluster)
**Strategy**: **Complete business scenarios with minimal mocking**

## Defense in Depth Testing Strategy - EXPANDED UNIT COVERAGE WITH PYRAMID APPROACH

### **🛡️ Core Principle: MAXIMUM Unit Coverage with Strategic Multi-Layer Defense**

Kubernaut implements **defense in depth** testing with **EXPANDED unit test foundation** where business functionality is validated comprehensively at the unit level AND strategically at integration/e2e levels for critical scenarios. The expanded pyramid approach ensures **MAXIMUM coverage at the unit level** (70%+ minimum, extending to ALL unit-testable BRs) while maintaining defense layers for scenarios requiring real system integration.

**EXPANSION MANDATE**: Unit tests should cover **EVERY business requirement that can be tested with external mocks**, not just the 70% minimum. This creates a comprehensive foundation layer with strategic overlapping coverage at higher levels.

## Testing Framework
- **BDD Framework**: Ginkgo/Gomega for behavior-driven development (MANDATORY per [00-project-guidelines.mdc](mdc:.cursor/rules/00-project-guidelines.mdc))
- **TDD Workflow**: Test-Driven Development is REQUIRED - write tests first, then implementation
- **Business Requirements**: ALL tests must map to specific business requirements (BR-XXX-XXX format)
- **Test Organization**: Follow package structure with `_test.go` suffix
- **Mock Strategy**: Use [pkg/testutil/mock_factory.go](mdc:pkg/testutil/mock_factory.go) for consistent mocks
- **Test Data**: Use [pkg/testutil/test_data_factory.go](mdc:pkg/testutil/test_data_factory.go) for fixture generation

## Test Environment Setup
### Development Environment
```bash
make bootstrap-dev     # Setup complete environment
make test-integration-dev  # Run tests
make cleanup-dev       # Clean up when done
```

### CI/CD Environment
```bash
make test-ci          # Run CI test suite with mocked LLM
```

## Testing Best Practices
1. **Business Outcome Focus**: Test business requirements, not implementation details (MANDATORY)
2. **Business Requirement Mapping**: All tests MUST reference specific BR-XXX-XXX requirements
3. **TDD Compliance**: Follow mandatory Test-Driven Development workflow
4. **Isolation**: Each test should be independent and repeatable
5. **Clear Naming**: Use descriptive test names that reflect business requirements
6. **Realistic Data**: Use realistic test data that mirrors production scenarios
7. **Error Scenarios**: Test both happy path and error conditions
8. **Performance**: Include performance assertions for critical paths

## Testing Anti-Patterns to AVOID
- **Null-Testing**: Weak assertions (not nil, > 0, empty checks) - use business-meaningful validations
- **Implementation Testing**: Testing how code works instead of what business value it delivers
- **Skip() Usage**: Never use Skip() to avoid test failures - fix tests properly
- **Local Mocks**: Create reusable mocks in [pkg/testutil/mocks/](mdc:pkg/testutil/mocks/) instead

## Infrastructure Requirements
- **Kind Cluster**: For local development and CI testing
- **PostgreSQL**: Real database for integration tests
- **Vector Database**: Separate PostgreSQL instance with pgvector
- **LLM Service**: Local AI model at 192.168.1.169:8080 or mocked for CI
- **Redis**: For caching integration tests

## Test Execution Strategy
- **Unit**: Run frequently during development
- **Integration**: Run before commits and in CI
- **E2E**: Run before releases and for major features

## Mock Usage Decision Matrix

| Component Type | Unit Tests | Integration Tests | E2E Tests |
|---------------|------------|-------------------|-----------|
| **External AI APIs** (HolmesGPT, OpenAI) | MOCK | MOCK (CI) / REAL (dev) | REAL |
| **External Infrastructure** (K8s, DB) | MOCK | REAL | REAL |
| **Business Logic Components** | REAL | REAL | REAL |
| **Internal Services** | REAL | REAL | REAL |
| **Configuration** | REAL | REAL | REAL |

## Confidence Targets
- **Unit Tests**: 85-90% confidence for comprehensive business logic
- **Integration Tests**: 80-85% confidence for component interactions
- **E2E Tests**: 90-95% confidence for complete workflows
- **Overall System**: 90% confidence through pyramid coverage with defense-in-depth