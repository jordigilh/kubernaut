# Redis StatefulSet with Sentinel for High Availability
# BR-GATEWAY-008, BR-GATEWAY-009: Ensures deduplication/storm detection always available
---
apiVersion: v1
kind: Service
metadata:
  name: redis-headless
  namespace: kubernaut-system
  labels:
    app: redis
spec:
  clusterIP: None
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
  - name: sentinel
    port: 26379
    targetPort: 26379
  selector:
    app: redis

---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: kubernaut-system
  labels:
    app: redis
spec:
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
  - name: sentinel
    port: 26379
    targetPort: 26379
  selector:
    app: redis

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: kubernaut-system
spec:
  serviceName: redis-headless
  replicas: 3  # 3 Redis instances for HA
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      initContainers:
      - name: init-redis
        image: redis:7-alpine
        command:
        - sh
        - -c
        - |
          set -ex
          # Copy default config
          cp /mnt/config-map/redis.conf /etc/redis/redis.conf

          # Determine if this is master or replica
          if [ "$(hostname)" = "redis-0" ]; then
            echo "This is redis-0 (master)"
          else
            echo "This is a replica, configuring replication"
            echo "replicaof redis-0.redis-headless.kubernaut-system.svc.cluster.local 6379" >> /etc/redis/redis.conf
          fi
        volumeMounts:
        - name: redis-config
          mountPath: /mnt/config-map
        - name: config
          mountPath: /etc/redis

      containers:
      - name: redis
        image: redis:7-alpine
        command:
        - redis-server
        - /etc/redis/redis.conf
        ports:
        - containerPort: 6379
          name: redis
        volumeMounts:
        - name: config
          mountPath: /etc/redis
        - name: data
          mountPath: /data
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5

      - name: sentinel
        image: redis:7-alpine
        command:
        - redis-sentinel
        - /etc/redis-sentinel/sentinel.conf
        ports:
        - containerPort: 26379
          name: sentinel
        volumeMounts:
        - name: sentinel-config
          mountPath: /etc/redis-sentinel
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          tcpSocket:
            port: 26379
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - -p
            - "26379"
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5

      volumes:
      - name: redis-config
        configMap:
          name: redis-config
      - name: sentinel-config
        configMap:
          name: redis-sentinel-config
      - name: config
        emptyDir: {}

  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: kubernaut-system
data:
  redis.conf: |
    # Redis configuration
    bind 0.0.0.0
    protected-mode no
    port 6379

    # Persistence
    save 900 1
    save 300 10
    save 60 10000

    # Memory
    maxmemory 256mb
    maxmemory-policy allkeys-lru

    # Replication
    replica-read-only yes

    # Logging
    loglevel notice


