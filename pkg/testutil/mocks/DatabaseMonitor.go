/*
Copyright 2025 Jordi Gil.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	interfaces "github.com/jordigilh/kubernaut/pkg/testutil/interfaces"
	mock "github.com/stretchr/testify/mock"
)

// DatabaseMonitor is an autogenerated mock type for the DatabaseMonitor type
type DatabaseMonitor struct {
	mock.Mock
}

// GetConnectionStats provides a mock function with no fields
func (_m *DatabaseMonitor) GetConnectionStats() interfaces.ConnectionStats {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConnectionStats")
	}

	var r0 interfaces.ConnectionStats
	if rf, ok := ret.Get(0).(func() interfaces.ConnectionStats); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(interfaces.ConnectionStats)
	}

	return r0
}

// GetMetrics provides a mock function with no fields
func (_m *DatabaseMonitor) GetMetrics() interfaces.ConnectionPoolMetrics {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMetrics")
	}

	var r0 interfaces.ConnectionPoolMetrics
	if rf, ok := ret.Get(0).(func() interfaces.ConnectionPoolMetrics); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(interfaces.ConnectionPoolMetrics)
	}

	return r0
}

// IsHealthy provides a mock function with no fields
func (_m *DatabaseMonitor) IsHealthy() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsHealthy")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Start provides a mock function with given fields: ctx
func (_m *DatabaseMonitor) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with no fields
func (_m *DatabaseMonitor) Stop() {
	_m.Called()
}

// TestConnection provides a mock function with given fields: ctx
func (_m *DatabaseMonitor) TestConnection(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TestConnection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDatabaseMonitor creates a new instance of DatabaseMonitor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabaseMonitor(t interface {
	mock.TestingT
	Cleanup(func())
}) *DatabaseMonitor {
	mock := &DatabaseMonitor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
