# Generic Dockerfile template for CRD controllers
# Red Hat UBI9 Multi-Architecture Build
#
# CUSTOMIZATION INSTRUCTIONS:
# 1. Replace {{CONTROLLER_NAME}} with your controller name (e.g., remediationprocessor)
# 2. Replace {{BIN_NAME}} with your binary name (e.g., remediation-processor)
# 3. Update labels with appropriate metadata
# 4. Adjust WORKDIR and COPY paths as needed

# Build stage
FROM registry.access.redhat.com/ubi9/go-toolset:1.21 AS builder

# Set working directory
WORKDIR /opt/app-root/src

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build the controller binary
RUN CGO_ENABLED=0 GOOS=linux GOARCH=${TARGETARCH:-amd64} go build \
	-a -installsuffix cgo \
	-ldflags="-w -s" \
	-o /opt/app-root/src/{{BIN_NAME}} \
	./cmd/{{CONTROLLER_NAME}}

# Runtime stage
FROM registry.access.redhat.com/ubi9/ubi-minimal:9.4

# Labels for Red Hat certification
LABEL name="kubernaut-{{CONTROLLER_NAME}}" \
	vendor="Kubernaut" \
	version="1.0.0" \
	release="1" \
	summary="Kubernaut {{CONTROLLER_NAME}} Controller" \
	description="Kubernetes CRD controller for {{CONTROLLER_NAME}} in Kubernaut platform" \
	io.k8s.description="Kubernetes CRD controller for {{CONTROLLER_NAME}}" \
	io.k8s.display-name="Kubernaut {{CONTROLLER_NAME}} Controller" \
	io.openshift.tags="kubernaut,kubernetes,controller,{{CONTROLLER_NAME}}"

# Install minimal runtime dependencies
RUN microdnf update -y && \
	microdnf install -y ca-certificates && \
	microdnf clean all

# Create non-root user
RUN useradd -r -u 1001 -g 0 {{CONTROLLER_NAME}}

# Copy binary from builder
COPY --from=builder /opt/app-root/src/{{BIN_NAME}} /usr/local/bin/{{BIN_NAME}}

# Create config directory
RUN mkdir -p /etc/{{CONTROLLER_NAME}} && \
	chown -R 1001:0 /etc/{{CONTROLLER_NAME}} && \
	chmod -R g=u /etc/{{CONTROLLER_NAME}}

# Switch to non-root user
USER 1001

# Set entrypoint
ENTRYPOINT ["/usr/local/bin/{{BIN_NAME}}"]

# Default command (can be overridden)
CMD ["--config", "/etc/{{CONTROLLER_NAME}}/config.yaml"]

# Expose metrics and health check ports
EXPOSE 8080 8081
