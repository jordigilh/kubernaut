apiVersion: v1
kind: ConfigMap
metadata:
  name: kubernaut-config
  namespace: kubernaut-integration
  labels:
    app: kubernaut
    component: config
data:
  config.yaml: |
    # Kubernaut Integration Environment Configuration

    # Application configuration
    app:
      name: "kubernaut"
      version: "1.0.0"

    # Server configuration
    server:
      webhook_port: "8080"
      metrics_port: "9090"
      health_port: "8081"

    # Webhook configuration
    webhook:
      port: "8080"
      path: "/alerts"
      auth:
        type: "bearer"
        token: ""

    # Database configuration
    database:
      enabled: true
      host: "postgresql-service"
      port: "5432"
      database: "action_history"
      username: "slm_user"
      password: ""  # loaded from environment
      ssl_mode: "disable"
      max_open_conns: 25
      max_idle_conns: 5
      conn_max_lifetime_minutes: 60

    # Vector database configuration
    vectordb:
      enabled: true
      backend: "postgresql"
      postgresql:
        host: "postgresql-service"
        port: "5432"
        database: "action_history"
        username: "slm_user"
        password: ""  # loaded from environment
        ssl_mode: "disable"
      embedding_service:
        service: "local"
        dimension: 1536
        model: "all-MiniLM-L6-v2"

    # AI services configuration
    ai_services:
      holmesgpt:
        enabled: false  # Disabled for webhook testing
        endpoint: "http://holmesgpt-service:8090"
        timeout: 300
        max_retries: 3
        retry_delay: 5

      llm:
        provider: "ollama"
        endpoint: "http://192.168.1.169:8080"
        model: "hf://ggml-org/gpt-oss-20b-GGUF"
        timeout: 120
        max_tokens: 4096
        temperature: 0.7

    # Kubernetes configuration
    kubernetes:
      context: ""
      namespace: "kubernaut-integration"
      service_account: "kubernaut-webhook"
      client_type: "auto"
      use_fake_client: false

    # Actions configuration
    actions:
      dry_run: false
      max_concurrent: 5
      cooldown_period: 300  # 5 minutes in seconds

    # Logging configuration
    logging:
      level: "debug"
      format: "json"

    # Monitoring configuration
    monitoring:
      use_production_clients: false
      prometheus:
        enabled: true
        endpoint: "http://prometheus-service:9090"
        timeout: 30
      alertmanager:
        enabled: true
        endpoint: "http://alertmanager-service:9093"
        timeout: 30
