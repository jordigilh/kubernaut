version: '3.8'

# Podman Compose Configuration for HolmesGPT Container Bindings
# Use: podman-compose up -d
# Alternative: docker-compose up -d (if using Docker)

services:
  # Ollama service for local LLM
  ollama:
    image: docker.io/ollama/ollama:latest
    container_name: prometheus-alerts-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - LLM_HOST=0.0.0.0
      - LLM_ORIGINS=*
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - holmes-network

  # HolmesGPT CLI container
  holmesgpt:
    build:
      context: ./docker/holmesgpt
      dockerfile: Dockerfile
    container_name: prometheus-alerts-holmesgpt
    volumes:
      - holmes_shared:/shared
      - ~/.kube:/root/.kube:ro
      - ./runbooks:/runbooks:ro
    environment:
      - OPENAI_API_BASE=http://ollama:11434/v1
      - OPENAI_API_KEY=ollama-local
      - LLM_MODEL=gpt-oss:20b
      - HOLMES_SESSION_ID=container-session
      - HOLMES_WORKING_DIR=/shared
      - HOLMES_MAX_TOKENS=4000
      - HOLMES_TEMPERATURE=0.3
      - HOLMES_TIMEOUT=300s
      - HOLMES_DEBUG=false
      - HOLMES_STREAMING=true
      - HOLMES_RUN_TEST=false
      - KUBECONFIG=/root/.kube/config
    depends_on:
      ollama:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "holmes", "--version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - holmes-network

  # Main application with container bindings
  prometheus-alerts-slm:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILD_MODE=container-bindings
    container_name: prometheus-alerts-slm-app
    ports:
      - "8080:8080"   # Main application port
      - "9993:9993"   # Metrics port
    volumes:
      - ./config:/app/config:ro
      - holmes_shared:/shared
      - ~/.kube:/root/.kube:ro
      - /var/run/docker.sock:/var/run/docker.sock  # For container bindings
    environment:
      - CONFIG_FILE=/app/config/container-production.yaml
      - DOCKER_HOST=unix:///var/run/docker.sock
      - HOLMES_CONTAINER_IMAGE=prometheus-alerts-holmesgpt:latest
      - HOLMES_SHARED_VOLUME=/shared
      - LLM_URL=http://ollama:11434
      - LOG_LEVEL=INFO
    depends_on:
      holmesgpt:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9993/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - holmes-network

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-alerts-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - holmes-network

  # AlertManager for testing (optional)
  alertmanager:
    image: prom/alertmanager:latest
    container_name: prometheus-alerts-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./config/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    restart: unless-stopped
    networks:
      - holmes-network

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: prometheus-alerts-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    networks:
      - holmes-network

volumes:
  ollama_data:
    driver: local
  holmes_shared:
    driver: local
  prometheus_data:
    driver: local
  alertmanager_data:
    driver: local
  grafana_data:
    driver: local

networks:
  holmes-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
