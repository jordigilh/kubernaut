// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	interfaces "github.com/jordigilh/kubernaut/pkg/testutil/interfaces"
	mock "github.com/stretchr/testify/mock"

	types "github.com/jordigilh/kubernaut/pkg/shared/types"
)

// KnowledgeBase is an autogenerated mock type for the KnowledgeBase type
type KnowledgeBase struct {
	mock.Mock
}

// GetActionRisks provides a mock function with given fields: action
func (_m *KnowledgeBase) GetActionRisks(action string) *types.LLMRiskAssessment {
	ret := _m.Called(action)

	if len(ret) == 0 {
		panic("no return value specified for GetActionRisks")
	}

	var r0 *types.LLMRiskAssessment
	if rf, ok := ret.Get(0).(func(string) *types.LLMRiskAssessment); ok {
		r0 = rf(action)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.LLMRiskAssessment)
		}
	}

	return r0
}

// GetHistoricalPatterns provides a mock function with given fields: alert
func (_m *KnowledgeBase) GetHistoricalPatterns(alert types.Alert) []map[string]interface{} {
	ret := _m.Called(alert)

	if len(ret) == 0 {
		panic("no return value specified for GetHistoricalPatterns")
	}

	var r0 []map[string]interface{}
	if rf, ok := ret.Get(0).(func(types.Alert) []map[string]interface{}); ok {
		r0 = rf(alert)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]interface{})
		}
	}

	return r0
}

// GetSystemState provides a mock function with given fields: ctx
func (_m *KnowledgeBase) GetSystemState(ctx context.Context) (map[string]interface{}, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSystemState")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]interface{}, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]interface{}); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetValidationRules provides a mock function with no fields
func (_m *KnowledgeBase) GetValidationRules() []map[string]interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetValidationRules")
	}

	var r0 []map[string]interface{}
	if rf, ok := ret.Get(0).(func() []map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]interface{})
		}
	}

	return r0
}

// StoreKnowledge provides a mock function with given fields: ctx, knowledge
func (_m *KnowledgeBase) StoreKnowledge(ctx context.Context, knowledge interfaces.KnowledgeEntry) error {
	ret := _m.Called(ctx, knowledge)

	if len(ret) == 0 {
		panic("no return value specified for StoreKnowledge")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.KnowledgeEntry) error); ok {
		r0 = rf(ctx, knowledge)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateKnowledge provides a mock function with given fields: ctx, id, updates
func (_m *KnowledgeBase) UpdateKnowledge(ctx context.Context, id string, updates map[string]interface{}) error {
	ret := _m.Called(ctx, id, updates)

	if len(ret) == 0 {
		panic("no return value specified for UpdateKnowledge")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) error); ok {
		r0 = rf(ctx, id, updates)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewKnowledgeBase creates a new instance of KnowledgeBase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKnowledgeBase(t interface {
	mock.TestingT
	Cleanup(func())
}) *KnowledgeBase {
	mock := &KnowledgeBase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
