package notifications

import (
	"context"
	"fmt"
	"net/smtp"
	"strings"
	"time"
)


// emailNotifier implements the Notifier interface for email
type emailNotifier struct {
	config EmailNotifierConfig
}

// NewEmailNotifier creates a new email notifier
func NewEmailNotifier(config EmailNotifierConfig) Notifier {
	return &emailNotifier{
		config: config,
	}
}

// GetName returns the notifier name
func (e *emailNotifier) GetName() string {
	return "email"
}

// SendNotification sends a notification via email
func (e *emailNotifier) SendNotification(ctx context.Context, notification Notification) error {
	if !e.config.Enabled {
		return nil
	}

	if err := e.validateConfig(); err != nil {
		return fmt.Errorf("invalid email configuration: %w", err)
	}

	subject := e.buildSubject(notification)
	body := e.buildEmailBody(notification)

	return e.sendEmail(subject, body)
}

// SendBatch sends multiple notifications in a batch
func (e *emailNotifier) SendBatch(ctx context.Context, notifications []Notification) error {
	if !e.config.Enabled {
		return nil
	}

	for _, notification := range notifications {
		if err := e.SendNotification(ctx, notification); err != nil {
			return fmt.Errorf("failed to send email notification %s: %w", notification.ID, err)
		}
	}
	return nil
}

// IsHealthy checks if the email notifier is healthy
func (e *emailNotifier) IsHealthy(ctx context.Context) bool {
	return e.config.Enabled && e.validateConfig() == nil
}

// Close performs any cleanup
func (e *emailNotifier) Close() error {
	return nil
}

// validateConfig validates the email configuration
func (e *emailNotifier) validateConfig() error {
	if e.config.SMTPHost == "" {
		return fmt.Errorf("SMTP host not configured")
	}
	if e.config.SMTPPort == 0 {
		return fmt.Errorf("SMTP port not configured")
	}
	if e.config.FromAddress == "" {
		return fmt.Errorf("from address not configured")
	}
	if len(e.config.ToAddresses) == 0 {
		return fmt.Errorf("no recipient addresses configured")
	}
	return nil
}

// buildSubject creates email subject from notification
func (e *emailNotifier) buildSubject(notification Notification) string {
	if e.config.Subject != "" {
		return fmt.Sprintf("%s - %s", e.config.Subject, notification.Title)
	}

	levelEmoji := e.getLevelEmoji(notification.Level)
	return fmt.Sprintf("%s [%s] %s", levelEmoji, strings.ToUpper(string(notification.Level)), notification.Title)
}

// buildEmailBody creates email body from notification
func (e *emailNotifier) buildEmailBody(notification Notification) string {
	var body strings.Builder

	body.WriteString(fmt.Sprintf("Alert Notification - %s\n", notification.Level))
	body.WriteString("=" + strings.Repeat("=", 50) + "\n\n")

	body.WriteString(fmt.Sprintf("Title: %s\n", notification.Title))
	body.WriteString(fmt.Sprintf("Message: %s\n", notification.Message))
	body.WriteString(fmt.Sprintf("Timestamp: %s\n", notification.Timestamp.Format(time.RFC3339)))
	body.WriteString(fmt.Sprintf("Source: %s\n", notification.Source))

	if notification.Component != "" {
		body.WriteString(fmt.Sprintf("Component: %s\n", notification.Component))
	}

	if notification.AlertName != "" {
		body.WriteString(fmt.Sprintf("Alert Name: %s\n", notification.AlertName))
	}

	if notification.Namespace != "" {
		body.WriteString(fmt.Sprintf("Namespace: %s\n", notification.Namespace))
	}

	if notification.Resource != "" {
		body.WriteString(fmt.Sprintf("Resource: %s\n", notification.Resource))
	}

	if notification.Action != "" {
		body.WriteString(fmt.Sprintf("Action: %s\n", notification.Action))
	}

	// Add tags
	if len(notification.Tags) > 0 {
		body.WriteString(fmt.Sprintf("Tags: %s\n", strings.Join(notification.Tags, ", ")))
	}

	// Add metadata
	if len(notification.Metadata) > 0 {
		body.WriteString("\nMetadata:\n")
		body.WriteString("---------\n")
		for key, value := range notification.Metadata {
			body.WriteString(fmt.Sprintf("%s: %s\n", key, value))
		}
	}

	body.WriteString("\n")
	body.WriteString("Generated by Prometheus Alerts SLM\n")
	body.WriteString(fmt.Sprintf("Notification ID: %s\n", notification.ID))

	return body.String()
}

// getLevelEmoji returns appropriate emoji for notification level
func (e *emailNotifier) getLevelEmoji(level NotificationLevel) string {
	switch level {
	case NotificationLevelCritical:
		return "üö®"
	case NotificationLevelError:
		return "‚ùå"
	case NotificationLevelWarning:
		return "‚ö†Ô∏è"
	case NotificationLevelInfo:
		return "‚ÑπÔ∏è"
	case NotificationLevelDebug:
		return "üîç"
	default:
		return "üì¢"
	}
}

// sendEmail sends the email using SMTP
func (e *emailNotifier) sendEmail(subject, body string) error {
	auth := smtp.PlainAuth("", e.config.SMTPUsername, e.config.SMTPPassword, e.config.SMTPHost)

	// Build email message
	message := e.buildMIMEMessage(subject, body)

	// Send to all recipients
	addr := fmt.Sprintf("%s:%d", e.config.SMTPHost, e.config.SMTPPort)
	err := smtp.SendMail(addr, auth, e.config.FromAddress, e.config.ToAddresses, []byte(message))
	if err != nil {
		return fmt.Errorf("failed to send email: %w", err)
	}

	return nil
}

// buildMIMEMessage builds a proper MIME email message
func (e *emailNotifier) buildMIMEMessage(subject, body string) string {
	var msg strings.Builder

	msg.WriteString(fmt.Sprintf("To: %s\n", strings.Join(e.config.ToAddresses, ", ")))
	msg.WriteString(fmt.Sprintf("From: %s\n", e.config.FromAddress))
	msg.WriteString(fmt.Sprintf("Subject: %s\n", subject))
	msg.WriteString("MIME-version: 1.0\n")
	msg.WriteString("Content-Type: text/plain; charset=\"UTF-8\"\n")
	msg.WriteString("\n")
	msg.WriteString(body)

	return msg.String()
}