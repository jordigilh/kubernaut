name: Testing Guidelines Compliance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'test/**'
      - 'pkg/**'
      - '.github/workflows/testing-compliance.yml'

jobs:
  validate-testing-compliance:
    name: Validate Testing Guidelines Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Generate Mocks
        run: |
          echo "🔄 Generating mocks from interfaces..."
          go generate ./pkg/testutil/interfaces/...

          # Verify mock generation succeeded
          if [ ! -d "pkg/testutil/mocks" ]; then
            echo "❌ Mock generation failed - mocks directory not found"
            exit 1
          fi
          echo "✅ Mock generation completed"

      - name: Validate Business Requirements Configuration
        run: |
          echo "🔄 Validating business requirements configuration..."
          go test -v ./pkg/testutil/config/... -run TestBusinessRequirements
          echo "✅ Business requirements configuration validated"

      - name: Check for Weak Assertions
        run: |
          echo "🔄 Scanning for weak assertion patterns..."

          # Check for weak ToNot(BeNil()) patterns without business requirements
          weak_assertions=$(grep -r "\.ToNot(BeNil())$" test/ --include="*_test.go" || true)
          if [ -n "$weak_assertions" ]; then
            echo "❌ Found weak assertions without business requirement context:"
            echo "$weak_assertions"
            echo ""
            echo "💡 Replace with: .ToNot(BeNil(), \"BR-XXX-YYY: business context description\")"
            exit 1
          fi

          # Check for weak BeNumerically patterns without business requirements
          weak_numericals=$(grep -r "\.To(BeNumerically.*>, 0)$" test/ --include="*_test.go" || true)
          if [ -n "$weak_numericals" ]; then
            echo "❌ Found weak numerical assertions without business requirements:"
            echo "$weak_numericals"
            echo ""
            echo "💡 Replace with: config.ExpectBusinessRequirement(value, \"BR-XXX-YYY\", \"test\", \"description\")"
            exit 1
          fi

          echo "✅ No weak assertion patterns found"

      - name: Check for Local Mock Violations
        run: |
          echo "🔄 Scanning for local mock implementations..."

          # Find local mock struct definitions
          local_mocks=$(grep -r "type.*Mock.*struct" test/ --include="*_test.go" --include="*_mocks.go" || true)
          if [ -n "$local_mocks" ]; then
            echo "⚠️  Found local mock implementations that should use generated mocks:"
            echo "$local_mocks"
            echo ""
            echo "💡 Replace with generated mocks from pkg/testutil/mocks/factory.go"
            echo "📚 See REMAINING_5_PERCENT_COMPLETION_PLAN.md for migration guidelines"
            # Don't fail CI for local mocks as they may need manual migration
          fi

          echo "✅ Local mock scan completed"

      - name: Validate Business Requirement Coverage
        run: |
          echo "🔄 Validating business requirement coverage in tests..."

          # Check that business requirement patterns are being used
          br_usage=$(grep -r "BR-[A-Z]" test/ --include="*_test.go" | wc -l || echo "0")
          echo "📊 Found $br_usage business requirement references in tests"

          if [ "$br_usage" -lt 20 ]; then
            echo "⚠️  Low business requirement coverage detected"
            echo "💡 Consider adding more BR-XXX-YYY validations to improve compliance"
          else
            echo "✅ Good business requirement coverage detected"
          fi

      - name: Run Compliance Test Suite
        run: |
          echo "🔄 Running core test compliance validation..."

          # Run business requirement validation tests
          go test -v ./pkg/testutil/config/... -run TestThresholdValidation

          # Run mock factory tests to ensure generated mocks work
          go test -v ./pkg/testutil/mocks/... -run TestMockFactory

          echo "✅ Compliance test suite passed"

      - name: Generate Compliance Report
        run: |
          echo "📊 === Testing Guidelines Compliance Report ===" > compliance-report.md
          echo "" >> compliance-report.md
          echo "**Generated**: $(date -u)" >> compliance-report.md
          echo "" >> compliance-report.md

          # Business requirement usage stats
          br_count=$(grep -r "BR-[A-Z]" test/ --include="*_test.go" | wc -l || echo "0")
          echo "**Business Requirement References**: $br_count" >> compliance-report.md

          # Mock factory usage stats
          factory_usage=$(grep -r "NewMockFactory\|CreateMock" test/ --include="*_test.go" | wc -l || echo "0")
          echo "**Mock Factory Usage**: $factory_usage instances" >> compliance-report.md

          # Test file coverage
          test_files=$(find test/ -name "*_test.go" | wc -l)
          echo "**Total Test Files**: $test_files" >> compliance-report.md

          echo "" >> compliance-report.md
          echo "**Compliance Status**: ✅ PASSING" >> compliance-report.md

          echo "📋 Compliance report generated:"
          cat compliance-report.md

      - name: Upload Compliance Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: testing-compliance-report
          path: compliance-report.md
          retention-days: 30

  mock-generation-validation:
    name: Validate Mock Generation
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install mockery
        run: |
          go install github.com/vektra/mockery/v2@latest

      - name: Regenerate All Mocks
        run: |
          echo "🔄 Regenerating all mocks to ensure consistency..."

          # Remove existing generated mocks
          find pkg/testutil/mocks -name "mock_*.go" -delete 2>/dev/null || true

          # Regenerate mocks
          go generate ./pkg/testutil/interfaces/...

          # Verify mocks were generated
          generated_mocks=$(find pkg/testutil/mocks -name "mock_*.go" | wc -l)
          echo "📊 Generated $generated_mocks mock files"

          if [ "$generated_mocks" -eq 0 ]; then
            echo "❌ No mocks were generated"
            exit 1
          fi

          echo "✅ Mock generation validation completed"

      - name: Compile Mock Tests
        run: |
          echo "🔄 Validating that generated mocks compile correctly..."
          go build ./pkg/testutil/mocks/...
          echo "✅ All generated mocks compile successfully"

  business-requirements-validation:
    name: Validate Business Requirements Integration
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Validate Configuration Loading
        run: |
          echo "🔄 Testing business requirements configuration loading..."
          go test -v ./pkg/testutil/config/... -run TestLoadThresholds
          echo "✅ Configuration loading validated"

      - name: Test Business Requirement Helpers
        run: |
          echo "🔄 Testing business requirement helper functions..."
          go test -v ./pkg/testutil/config/... -run TestExpectBusinessRequirement
          echo "✅ Business requirement helpers validated"

      - name: Validate Environment Support
        run: |
          echo "🔄 Testing multi-environment threshold support..."

          # Test different environments
          for env in test dev staging prod; do
            echo "Testing environment: $env"
            go run -c "
              package main
              import (
                \"github.com/jordigilh/kubernaut/pkg/testutil/config\"
                \"fmt\"
              )
              func main() {
                _, err := config.LoadThresholds(\"$env\")
                if err != nil {
                  fmt.Printf(\"Failed to load %s environment: %v\", \"$env\", err)
                  return
                }
                fmt.Printf(\"✅ %s environment loaded successfully\", \"$env\")
              }
            " || echo "⚠️  Environment $env not configured (optional)"
          done

          echo "✅ Environment support validation completed"


