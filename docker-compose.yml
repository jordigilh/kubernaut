version: '3.8'

services:
  prometheus-alerts-slm:
    build: .
    ports:
      - "8080:8080"  # Webhook port
      - "9090:9090"  # Metrics port
    environment:
      # SLM Configuration for LocalAI
      - SLM_PROVIDER=localai
      - SLM_ENDPOINT=http://localai:8080
      - SLM_MODEL=granite-3.0-8b-instruct
      - SLM_TEMPERATURE=0.3
      - SLM_MAX_TOKENS=500
      
      # OpenShift Configuration
      - OPENSHIFT_CONTEXT=${OPENSHIFT_CONTEXT}
      - OPENSHIFT_NAMESPACE=${OPENSHIFT_NAMESPACE:-default}
      
      # Application Configuration
      - LOG_LEVEL=info
      - DRY_RUN=${DRY_RUN:-false}
      
    volumes:
      # Mount kubeconfig for OpenShift access
      - ~/.kube:/root/.kube:ro
    depends_on:
      - localai
    networks:
      - alerts-network
    restart: unless-stopped

  localai:
    image: quay.io/go-skynet/local-ai:latest
    ports:
      - "8081:8080"  # Expose LocalAI on different port
    environment:
      - MODELS_PATH=/models
      - DEBUG=false
      - THREADS=4
      - CONTEXT_SIZE=4096
    volumes:
      - ./models:/models
      - ./localai-config:/config
    networks:
      - alerts-network
    restart: unless-stopped
    # Resource limits for model inference
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4'
        reservations:
          memory: 4G
          cpus: '2'
    # Health check for LocalAI
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/readyz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Optional: Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - alerts-network
    profiles:
      - monitoring

networks:
  alerts-network:
    driver: bridge

volumes:
  models-data:
  prometheus-data: