# HolmesGPT REST API Server - Containerfile for Red Hat Ecosystem
# Optimized for ramalama integration and production deployment
# Built on Red Hat Universal Base Images

ARG UBI_VERSION=9.5
ARG PYTHON_VERSION=3.11

# Build stage: Dependency installation
FROM registry.access.redhat.com/ubi9/python-311:latest AS builder

# Install build dependencies
USER root
RUN dnf update -y && \
    dnf install -y \
        gcc \
        gcc-c++ \
        git \
        make \
        && dnf clean all

# Copy requirements and install dependencies
WORKDIR /app
COPY --chown=1001:0 requirements-dev.txt ./
USER 1001

# Install Python dependencies with optimization
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir \
        fastapi==0.116.2 \
        uvicorn[standard]==0.35.0 \
        structlog==25.4.0 \
        prometheus_client==0.22.1 \
        pydantic==2.11.9 \
        httpx==0.25.2 \
        requests==2.31.0 \
        PyJWT==2.8.0

# Runtime stage: Standard Python UBI for production
FROM registry.access.redhat.com/ubi9/python-311:latest

# Metadata for Red Hat Container Certification
LABEL name="holmesgpt-api" \
      vendor="Kubernaut Project" \
      version="2.0.0" \
      release="1" \
      summary="HolmesGPT REST API Server with Ramalama Integration" \
      description="Production-ready HolmesGPT API server optimized for ramalama LLM backend" \
      io.k8s.description="HolmesGPT REST API Server for AI-powered Kubernetes troubleshooting" \
      io.k8s.display-name="HolmesGPT API (Ramalama)" \
      io.openshift.tags="ai,kubernetes,troubleshooting,llm,ramalama,fastapi" \
      com.redhat.component="holmesgpt-api" \
      com.redhat.license_terms="https://www.redhat.com/en/about/red-hat-end-user-license-agreements#UBI" \
      maintainer="kubernaut-team" \
      build.optimization="ramalama-integration" \
      security.level="hardened"

# Copy requirements and install dependencies
USER root
COPY --chown=1001:0 requirements-api.txt ./
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements-api.txt

# Create application directories
RUN mkdir -p /app/src /app/config /app/logs /app/data && \
    chown -R 1001:0 /app && \
    chmod -R g=u /app

# Copy application source code
WORKDIR /app
COPY --chown=1001:0 src/ ./src/
COPY --chown=1001:0 config/ ./config/

# Copy entrypoint script
COPY --chown=1001:0 simple-entrypoint.sh ./entrypoint.sh
RUN chmod +x ./entrypoint.sh

# Set optimized environment variables
ENV PYTHONPATH=/opt/app-root/lib/python3.11/site-packages:/app/src \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PORT=3000 \
    LLM_PROVIDER=ramalama \
    HOME=/app \
    TMPDIR=/tmp

# Security: Run as non-root user
USER 1001

# Health check optimized for ramalama integration
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD python3.11 -c "\
import requests, sys, os; \
try: \
    resp = requests.get(f'http://localhost:{os.getenv(\"PORT\", \"3000\")}/health', timeout=8); \
    resp.raise_for_status(); \
    sys.exit(0); \
except: \
    sys.exit(1)"

# Expose application port
EXPOSE 3000

# Start the application
ENTRYPOINT ["./entrypoint.sh"]