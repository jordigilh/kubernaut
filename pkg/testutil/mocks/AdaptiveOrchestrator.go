<<<<<<< HEAD
=======
/*
Copyright 2025 Jordi Gil.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

>>>>>>> crd_implementation
// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	interfaces "github.com/jordigilh/kubernaut/pkg/testutil/interfaces"
	mock "github.com/stretchr/testify/mock"
)

// AdaptiveOrchestrator is an autogenerated mock type for the AdaptiveOrchestrator type
type AdaptiveOrchestrator struct {
	mock.Mock
}

// AllocateResources provides a mock function with given fields: ctx, requirements
func (_m *AdaptiveOrchestrator) AllocateResources(ctx context.Context, requirements interfaces.ResourceRequirements) (*interfaces.ResourceAllocationResult, error) {
	ret := _m.Called(ctx, requirements)

	if len(ret) == 0 {
		panic("no return value specified for AllocateResources")
	}

	var r0 *interfaces.ResourceAllocationResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.ResourceRequirements) (*interfaces.ResourceAllocationResult, error)); ok {
		return rf(ctx, requirements)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.ResourceRequirements) *interfaces.ResourceAllocationResult); ok {
		r0 = rf(ctx, requirements)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interfaces.ResourceAllocationResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interfaces.ResourceRequirements) error); ok {
		r1 = rf(ctx, requirements)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AnalyzeWorkflowPerformance provides a mock function with given fields: ctx, workflowID
func (_m *AdaptiveOrchestrator) AnalyzeWorkflowPerformance(ctx context.Context, workflowID string) (*interfaces.WorkflowPerformanceAnalysis, error) {
	ret := _m.Called(ctx, workflowID)

	if len(ret) == 0 {
		panic("no return value specified for AnalyzeWorkflowPerformance")
	}

	var r0 *interfaces.WorkflowPerformanceAnalysis
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*interfaces.WorkflowPerformanceAnalysis, error)); ok {
		return rf(ctx, workflowID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *interfaces.WorkflowPerformanceAnalysis); ok {
		r0 = rf(ctx, workflowID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interfaces.WorkflowPerformanceAnalysis)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, workflowID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAlternativeStrategy provides a mock function with given fields: ctx, originalStrategy
func (_m *AdaptiveOrchestrator) GetAlternativeStrategy(ctx context.Context, originalStrategy string) (string, error) {
	ret := _m.Called(ctx, originalStrategy)

	if len(ret) == 0 {
		panic("no return value specified for GetAlternativeStrategy")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, originalStrategy)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, originalStrategy)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, originalStrategy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandleExecutionFailure provides a mock function with given fields: ctx, executionID, failure
func (_m *AdaptiveOrchestrator) HandleExecutionFailure(ctx context.Context, executionID string, failure interfaces.ExecutionFailureConfig) (*interfaces.FailureRecoveryResult, error) {
	ret := _m.Called(ctx, executionID, failure)

	if len(ret) == 0 {
		panic("no return value specified for HandleExecutionFailure")
	}

	var r0 *interfaces.FailureRecoveryResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interfaces.ExecutionFailureConfig) (*interfaces.FailureRecoveryResult, error)); ok {
		return rf(ctx, executionID, failure)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interfaces.ExecutionFailureConfig) *interfaces.FailureRecoveryResult); ok {
		r0 = rf(ctx, executionID, failure)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interfaces.FailureRecoveryResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interfaces.ExecutionFailureConfig) error); ok {
		r1 = rf(ctx, executionID, failure)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OptimizeWorkflow provides a mock function with given fields: ctx, workflowID, constraints
func (_m *AdaptiveOrchestrator) OptimizeWorkflow(ctx context.Context, workflowID string, constraints interfaces.OptimizationConstraints) (*interfaces.OptimizationResult, error) {
	ret := _m.Called(ctx, workflowID, constraints)

	if len(ret) == 0 {
		panic("no return value specified for OptimizeWorkflow")
	}

	var r0 *interfaces.OptimizationResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interfaces.OptimizationConstraints) (*interfaces.OptimizationResult, error)); ok {
		return rf(ctx, workflowID, constraints)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interfaces.OptimizationConstraints) *interfaces.OptimizationResult); ok {
		r0 = rf(ctx, workflowID, constraints)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interfaces.OptimizationResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interfaces.OptimizationConstraints) error); ok {
		r1 = rf(ctx, workflowID, constraints)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAdaptiveOrchestrator creates a new instance of AdaptiveOrchestrator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdaptiveOrchestrator(t interface {
	mock.TestingT
	Cleanup(func())
}) *AdaptiveOrchestrator {
	mock := &AdaptiveOrchestrator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
