// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	engine "github.com/jordigilh/kubernaut/pkg/workflow/engine"

	mock "github.com/stretchr/testify/mock"
)

// ExecutionRepository is an autogenerated mock type for the ExecutionRepository type
type ExecutionRepository struct {
	mock.Mock
}

// DeleteExecution provides a mock function with given fields: ctx, executionID
func (_m *ExecutionRepository) DeleteExecution(ctx context.Context, executionID string) error {
	ret := _m.Called(ctx, executionID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExecution")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, executionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetExecution provides a mock function with given fields: ctx, executionID
func (_m *ExecutionRepository) GetExecution(ctx context.Context, executionID string) (*engine.RuntimeWorkflowExecution, error) {
	ret := _m.Called(ctx, executionID)

	if len(ret) == 0 {
		panic("no return value specified for GetExecution")
	}

	var r0 *engine.RuntimeWorkflowExecution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*engine.RuntimeWorkflowExecution, error)); ok {
		return rf(ctx, executionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *engine.RuntimeWorkflowExecution); ok {
		r0 = rf(ctx, executionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*engine.RuntimeWorkflowExecution)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, executionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExecutionsByPattern provides a mock function with given fields: ctx, pattern
func (_m *ExecutionRepository) GetExecutionsByPattern(ctx context.Context, pattern string) ([]*engine.RuntimeWorkflowExecution, error) {
	ret := _m.Called(ctx, pattern)

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionsByPattern")
	}

	var r0 []*engine.RuntimeWorkflowExecution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*engine.RuntimeWorkflowExecution, error)); ok {
		return rf(ctx, pattern)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*engine.RuntimeWorkflowExecution); ok {
		r0 = rf(ctx, pattern)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*engine.RuntimeWorkflowExecution)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, pattern)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExecutionsByWorkflowID provides a mock function with given fields: ctx, workflowID
func (_m *ExecutionRepository) GetExecutionsByWorkflowID(ctx context.Context, workflowID string) ([]*engine.RuntimeWorkflowExecution, error) {
	ret := _m.Called(ctx, workflowID)

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionsByWorkflowID")
	}

	var r0 []*engine.RuntimeWorkflowExecution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*engine.RuntimeWorkflowExecution, error)); ok {
		return rf(ctx, workflowID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*engine.RuntimeWorkflowExecution); ok {
		r0 = rf(ctx, workflowID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*engine.RuntimeWorkflowExecution)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, workflowID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreExecution provides a mock function with given fields: ctx, execution
func (_m *ExecutionRepository) StoreExecution(ctx context.Context, execution *engine.RuntimeWorkflowExecution) error {
	ret := _m.Called(ctx, execution)

	if len(ret) == 0 {
		panic("no return value specified for StoreExecution")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *engine.RuntimeWorkflowExecution) error); ok {
		r0 = rf(ctx, execution)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateExecution provides a mock function with given fields: ctx, execution
func (_m *ExecutionRepository) UpdateExecution(ctx context.Context, execution *engine.RuntimeWorkflowExecution) error {
	ret := _m.Called(ctx, execution)

	if len(ret) == 0 {
		panic("no return value specified for UpdateExecution")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *engine.RuntimeWorkflowExecution) error); ok {
		r0 = rf(ctx, execution)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewExecutionRepository creates a new instance of ExecutionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExecutionRepository {
	mock := &ExecutionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
