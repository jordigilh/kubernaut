version: '3.8'

# Integration Test Services
# This compose file provides containerized services specifically for integration testing
# Usage:
#   podman-compose -f test/integration/docker-compose.integration.yml up -d
#   podman-compose -f test/integration/docker-compose.integration.yml down

services:
  # PostgreSQL with pgvector extension for integration testing
  postgres-integration:
    image: docker.io/pgvector/pgvector:pg16
    container_name: kubernaut-integration-postgres
    environment:
      POSTGRES_DB: action_history
      POSTGRES_USER: slm_user
      POSTGRES_PASSWORD: slm_password_dev
      # Enable additional extensions
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5433:5432"  # Use different port to avoid conflicts
    volumes:
      # Mount migration scripts for auto-initialization
      - ../../migrations:/docker-entrypoint-initdb.d:ro
      # Custom init script for vector extension
      - ./scripts/init-vector-db.sql:/docker-entrypoint-initdb.d/99-init-vector.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U slm_user -d action_history -h localhost -p 5432"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - integration-test

  # Vector Database (can be same as postgres or separate service)
  vector-db-integration:
    image: docker.io/pgvector/pgvector:pg16
    container_name: kubernaut-integration-vectordb
    environment:
      POSTGRES_DB: vector_store
      POSTGRES_USER: vector_user
      POSTGRES_PASSWORD: vector_password_dev
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5434:5432"  # Different port for vector database
    volumes:
      # Enhanced vector-specific initialization
      - ./scripts/init-vector-store-enhanced.sql:/docker-entrypoint-initdb.d/01-init-vector-store-enhanced.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vector_user -d vector_store -h localhost -p 5432"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - integration-test

  # Redis for caching (if needed for integration tests)
  redis-integration:
    image: docker.io/library/redis:7-alpine
    container_name: kubernaut-integration-redis
    ports:
      - "6380:6379"  # Different port to avoid conflicts
    command: redis-server --appendonly yes --requirepass "integration_redis_password"
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "integration_redis_password", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - integration-test

  # Context API Server for integration testing
  context-api:
    build:
      context: ../../
      dockerfile: Dockerfile
    container_name: kubernaut-context-api
    environment:
      # Database configuration
      POSTGRES_HOST: postgres-integration
      POSTGRES_PORT: 5432
      POSTGRES_DB: action_history
      POSTGRES_USER: slm_user
      POSTGRES_PASSWORD: slm_password_dev
      # Vector DB configuration
      VECTOR_DB_HOST: vector-db-integration
      VECTOR_DB_PORT: 5432
      VECTOR_DB_NAME: vector_store
      VECTOR_DB_USER: vector_user
      VECTOR_DB_PASSWORD: vector_password_dev
      # Service configuration
      PORT: 8091
      LOG_LEVEL: INFO
      # Enable real Kubernetes client for integration testing with Kind cluster
      USE_FAKE_K8S_CLIENT: "false"
      SKIP_K8S_INTEGRATION: "false"
      KUBERNETES_IN_CLUSTER: "false"
      # Use default kubeconfig path that application expects
      HOME: /home/appuser
      # HolmesGPT API middleware configuration
      HOLMESGPT_API_URL: "http://holmesgpt-api:8090"
    ports:
      - "8091:8091"
    volumes:
      # Mount kubeconfig to default location expected by clientcmd.RecommendedHomeFile
      - ~/.kube/config:/home/appuser/.kube/config:ro
    networks:
      - integration-test
    depends_on:
      postgres-integration:
        condition: service_healthy
      vector-db-integration:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8091/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # HolmesGPT API for integration testing
  holmesgpt-api:
    build:
      context: ../../
      dockerfile: docker/holmesgpt-api/Containerfile
    container_name: kubernaut-holmesgpt-api
    environment:
      # LLM Configuration for direct ramalama connection
      HOLMESGPT_LLM_PROVIDER: ramalama
      HOLMESGPT_LLM_MODEL: hf://ggml-org/gpt-oss-20b-GGUF
      HOLMESGPT_LLM_BASE_URL: http://host.containers.internal:8010
      # Context API configuration for tools and history (service discovery)
      KUBERNAUT_CONTEXT_API_URL: http://context-api:8091
      KUBERNAUT_CONTEXT_API_TIMEOUT: 30
      # Port configuration
      HOLMESGPT_PORT: 8090
    ports:
      - "3000:8090"
    networks:
      - integration-test
    depends_on:
      postgres-integration:
        condition: service_healthy
      redis-integration:
        condition: service_healthy
      context-api:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8090/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

volumes:
  postgres_integration_data:
    driver: local
  vector_integration_data:
    driver: local
  redis_integration_data:
    driver: local

networks:
  integration-test:
    driver: bridge
    name: kubernaut-integration-test
