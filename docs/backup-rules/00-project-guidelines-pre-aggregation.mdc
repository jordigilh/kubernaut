---
alwaysApply: true
description: "Mandatory project guidelines and development principles for kubernaut"
---

# Project Guidelines - Mandatory Development Principles

## üö® **ALWAYS FOLLOW THESE PRINCIPLES**

### Critical Decision Process
**MANDATORY**: Ask for input on ALL critical decisions including:
- Architecture changes and design patterns
- New dependencies or external integrations
- Performance trade-offs and optimization decisions
- Security implementations and access controls
- Refactoring that affects system complexity

**Format**: Provide recommendation with detailed justification when asking for input.

### Business Requirements Mandate
**MANDATORY**: Every code change must be backed by at least ONE business requirement (BR-XXX-XXX format).
- All tests must map to specific business requirements
- All implementation code must serve documented business needs
- No speculative or "nice to have" code without business backing
- Business requirements dictate functionality; technical patterns enable business logic

## üß™ **Test-Driven Development (TDD) - MANDATORY**

### TDD Workflow - REQUIRED
1. **FIRST**: Write unit tests defining business contract
2. **SECOND**: Define business interfaces to make tests compile
3. **NEVER**: Use `Skip()` to avoid test failures
4. **THEN**: Implement business logic after ALL tests are complete and failing
5. **FINALLY**: Run tests to validate implementation

### Test Requirements
- Use Ginkgo/Gomega BDD framework (see [03-testing-strategy.mdc](mdc:.cursor/rules/03-testing-strategy.mdc))
- Reuse existing test framework code and mocks from [pkg/testutil/](mdc:pkg/testutil/)
- **AVOID** null-testing anti-pattern (not nil, > 0, empty checks)
- **ENSURE** assertions validate business outcomes, not weak validations
- Map all tests to business requirements with clear BR-XXX-XXX references

## üíª **Code Quality Standards**

### Error Handling - MANDATORY
- **ALWAYS** handle errors, never ignore them
- **ALWAYS** add log entry for every error
- Use structured error types from [internal/errors/](mdc:internal/errors/)
- Follow error handling patterns in [02-go-coding-standards.mdc](mdc:.cursor/rules/02-go-coding-standards.mdc)

### Type System Guidelines
- **AVOID** using `any` or `interface{}` unless absolutely necessary
- **ALWAYS** use structured field values with specific types
- **AVOID** local type definitions to resolve import cycles
- Use shared types from [pkg/shared/types/](mdc:pkg/shared/types/) instead

### Code Organization
- **AVOID** duplication - REUSE existing code through refactoring
- **ENSURE** functionality aligns with business requirements
- **INTEGRATE** all new business code with main codebase
- **AVOID** duplicating structure names - use unique, business-aligned names

## üîß **Development Principles**

### Code Integration Requirements
- **MANDATORY**: Integrate all new business code with main code
- Remove any code not backed by business requirements
- Ensure seamless integration with existing architecture
- Follow patterns established in [01-project-structure.mdc](mdc:.cursor/rules/01-project-structure.mdc)

### Quality Assurance
- **ENSURE** no compilation or lint errors (golangci-lint)
- **AVOID** race conditions and memory leaks
- **USE** configuration settings for environment setup (never hardcode)
- **AVOID** backwards compatibility support (pre-release product)

## üéØ **Completion Requirements**

### Post-Development Checklist - MANDATORY
After completing any development task:

1. **Build Validation**: Code builds without errors from changes made
2. **Lint Compliance**: No new lint errors (unusedparam, unusedfunc, etc.)
3. **Business Integration**: Provide confidence assessment of business code integration
4. **Enhancement Proposals**: Suggest improvements with ‚â•60% confidence level

### Confidence Assessment Format - REQUIRED
Provide BOTH:
- **Simple Percentage**: 60-100% confidence rating
- **Detailed Justification**: Including risks, assumptions, and validation approach

Example:
```
Confidence Assessment: 85%
Justification: Implementation follows established patterns in pkg/workflow/engine/
and integrates cleanly with existing HolmesGPT client. Risk: Minor performance
impact on high-alert scenarios. Validation: Unit tests cover 90% of edge cases.
```

## üìã **Anti-Patterns to AVOID**

### Testing Anti-Patterns
- **NULL-TESTING**: Weak assertions (not nil, > 0, empty checks)
- **IMPLEMENTATION TESTING**: Testing how instead of what business outcome
- **MOCK OVERUSE**: In integration tests - use real components when possible

### Development Anti-Patterns
- **HARDCODED ENVIRONMENT**: Configuration should be externalized
- **BACKWARDS COMPATIBILITY**: No legacy support needed pre-release
- **ASSUMPTION-DRIVEN**: Making decisions without business requirement backing
- **LOCAL TYPE DEFINITIONS**: For import cycle resolution

## üó£Ô∏è **Communication Standards**

### Technical Communication
- **Be clear and realistic** - avoid superlatives and hyperboles
- **Provide concrete examples** with business context
- **Reference specific business requirements** in discussions
- **Justify technical decisions** with business impact analysis

### Code Documentation
- Document business purpose and requirements served
- Include confidence assessments in significant changes
- Reference related business requirements in code comments
- Follow documentation standards in [06-documentation-standards.mdc](mdc:.cursor/rules/06-documentation-standards.mdc)

## üîó **Integration with Other Rules**

This rule establishes mandatory principles that complement:
- [01-project-structure.mdc](mdc:.cursor/rules/01-project-structure.mdc) - Architecture navigation
- [02-go-coding-standards.mdc](mdc:.cursor/rules/02-go-coding-standards.mdc) - Technical implementation patterns
- [03-testing-strategy.mdc](mdc:.cursor/rules/03-testing-strategy.mdc) - Testing framework and strategy
- [04-ai-ml-guidelines.mdc](mdc:.cursor/rules/04-ai-ml-guidelines.mdc) - AI/ML specific patterns
- [05-kubernetes-safety.mdc](mdc:.cursor/rules/05-kubernetes-safety.mdc) - Kubernetes operational safety

**Priority**: When conflicts arise between technical best practices and project guidelines, ask for input and provide recommendation with justification.

## ‚ö° **Quick Reference Checklist**

Before any code submission:
- [ ] Business requirement mapped (BR-XXX-XXX)
- [ ] TDD workflow followed (tests first, then implementation)
- [ ] All errors handled and logged
- [ ] No lint or compilation errors
- [ ] Code integrated with main business logic
- [ ] Confidence assessment provided
- [ ] Critical decisions escalated if needed