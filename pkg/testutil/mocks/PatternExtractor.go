// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	interfaces "github.com/jordigilh/kubernaut/pkg/testutil/interfaces"
	mock "github.com/stretchr/testify/mock"
)

// PatternExtractor is an autogenerated mock type for the PatternExtractor type
type PatternExtractor struct {
	mock.Mock
}

// AnalyzePatternEvolution provides a mock function with given fields: ctx, patternID
func (_m *PatternExtractor) AnalyzePatternEvolution(ctx context.Context, patternID string) (*interfaces.PatternEvolution, error) {
	ret := _m.Called(ctx, patternID)

	if len(ret) == 0 {
		panic("no return value specified for AnalyzePatternEvolution")
	}

	var r0 *interfaces.PatternEvolution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*interfaces.PatternEvolution, error)); ok {
		return rf(ctx, patternID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *interfaces.PatternEvolution); ok {
		r0 = rf(ctx, patternID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interfaces.PatternEvolution)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, patternID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExtractFeatures provides a mock function with given fields: ctx, data
func (_m *PatternExtractor) ExtractFeatures(ctx context.Context, data interface{}) (map[string]float64, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for ExtractFeatures")
	}

	var r0 map[string]float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (map[string]float64, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) map[string]float64); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]float64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSimilarPatterns provides a mock function with given fields: ctx, embedding, threshold
func (_m *PatternExtractor) FindSimilarPatterns(ctx context.Context, embedding []float64, threshold float64) ([]interfaces.SimilarityResult, error) {
	ret := _m.Called(ctx, embedding, threshold)

	if len(ret) == 0 {
		panic("no return value specified for FindSimilarPatterns")
	}

	var r0 []interfaces.SimilarityResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []float64, float64) ([]interfaces.SimilarityResult, error)); ok {
		return rf(ctx, embedding, threshold)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []float64, float64) []interfaces.SimilarityResult); ok {
		r0 = rf(ctx, embedding, threshold)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interfaces.SimilarityResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []float64, float64) error); ok {
		r1 = rf(ctx, embedding, threshold)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateEmbedding provides a mock function with given fields: ctx, features
func (_m *PatternExtractor) GenerateEmbedding(ctx context.Context, features map[string]float64) ([]float64, error) {
	ret := _m.Called(ctx, features)

	if len(ret) == 0 {
		panic("no return value specified for GenerateEmbedding")
	}

	var r0 []float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]float64) ([]float64, error)); ok {
		return rf(ctx, features)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]float64) []float64); ok {
		r0 = rf(ctx, features)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string]float64) error); ok {
		r1 = rf(ctx, features)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidatePatternAccuracy provides a mock function with given fields: ctx, pattern
func (_m *PatternExtractor) ValidatePatternAccuracy(ctx context.Context, pattern interface{}) (*interfaces.AccuracyValidation, error) {
	ret := _m.Called(ctx, pattern)

	if len(ret) == 0 {
		panic("no return value specified for ValidatePatternAccuracy")
	}

	var r0 *interfaces.AccuracyValidation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (*interfaces.AccuracyValidation, error)); ok {
		return rf(ctx, pattern)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) *interfaces.AccuracyValidation); ok {
		r0 = rf(ctx, pattern)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interfaces.AccuracyValidation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, pattern)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPatternExtractor creates a new instance of PatternExtractor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPatternExtractor(t interface {
	mock.TestingT
	Cleanup(func())
}) *PatternExtractor {
	mock := &PatternExtractor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
