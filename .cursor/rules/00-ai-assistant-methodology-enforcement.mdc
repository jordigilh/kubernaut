---
alwaysApply: true
---

# AI Assistant Behavioral Constraints for TDD Enforcement - COMPREHENSIVE

## üö® **PRIORITY HIERARCHY**

1. **Enhanced 'fix-build' Methodology** (HIGHEST PRIORITY)
2. **Real-Time Session Enforcement** (HIGH PRIORITY)
3. **Basic TDD Validation** (MEDIUM PRIORITY)
4. **Emergency Stop Conditions** (CRITICAL PRIORITY)

---

## ü§ñ **MANDATORY AI ASSISTANT PROTOCOL**

### **REAL-TIME PREVENTION SYSTEM**

**CRITICAL PRINCIPLE**: Problems are **PREVENTED DURING THE SESSION** through mandatory AI validation, not caught after commit.

**AI must execute validation BEFORE generating any code, not after:**

---

## üéØ **ENHANCED 'fix-build' METHODOLOGY - HIGHEST PRIORITY**

### **When user invokes `/fix-build` command, AI MUST execute this enhanced methodology:**

```
üö® ENHANCED 'fix-build' METHODOLOGY ACTIVE - REAL-TIME SESSION ENFORCEMENT

‚ö†Ô∏è  CRITICAL: This prevents catastrophic problems DURING the session, not after commit

BEFORE PROCEEDING, I MUST COMPLETE THESE MANDATORY VALIDATIONS:

PHASE 1: DISCOVERY VALIDATION ‚è∏Ô∏è (BLOCKING - MUST COMPLETE FIRST)
‚ñ° Read actual type definition files (PREVENTS: undefined field references)
‚ñ° Search existing test patterns comprehensively (PREVENTS: duplicate implementations)
‚ñ° Verify current integration patterns (PREVENTS: orphaned business code)
‚ñ° Execute build error analysis (PREVENTS: cascade failures)

PHASE 2: DECISION GATE VALIDATION ‚è∏Ô∏è (BLOCKING - MUST COMPLETE SECOND)
‚ñ° Confirm all referenced fields exist in structs (PREVENTS: runtime panics)
‚ñ° Verify testutil dependencies are available (PREVENTS: test compilation failures)
‚ñ° Validate complete dependency chain (PREVENTS: missing imports)
‚ñ° Confirm main application integration patterns (PREVENTS: unused code)

PHASE 3: TESTING STRATEGY VALIDATION ‚è∏Ô∏è (BLOCKING - MUST COMPLETE THIRD)
‚ñ° Use real business logic components (PREVENTS: mock-only implementations)
‚ñ° Mock ONLY external dependencies (PREVENTS: over-mocking)
‚ñ° Map all tests to BR-XXX-XXX requirements (PREVENTS: speculative code)
‚ñ° Follow defense-in-depth testing approach (PREVENTS: inadequate coverage)

üö® ENFORCEMENT RULE: I cannot proceed to implementation until ALL checkboxes are ‚úÖ
üö® SESSION SAFETY: Each validation PREVENTS specific catastrophic problems
üö® REAL-TIME: Validation happens DURING session, not after commit
```

---

## üîç **CRITICAL DECISION CHECKPOINTS - BLOCKING VALIDATION**

**These are BLOCKING checkpoints - AI must STOP and validate:**

### **CHECKPOINT A: Type Reference Validation**
**TRIGGER**: About to reference any struct field (e.g., `object.FieldName`)
**MANDATORY ACTION**:
```bash
# HALT: Validate type definition exists
grep -r "type.*ObjectType.*struct" pkg/ --include="*.go"
# RULE: If field not found in type definition, STOP and fix type definition first
```

### **CHECKPOINT B: Test Creation Validation**
**TRIGGER**: About to create test file with business logic references
**MANDATORY ACTION**:
```bash
# HALT: Search for existing implementations
codebase_search "existing [ComponentType] implementations"
# RULE: If creating new types, must follow TDD RED-GREEN-REFACTOR sequence
```

### **CHECKPOINT C: Business Integration Validation**
**TRIGGER**: Creating new business types or interfaces
**MANDATORY ACTION**:
```bash
# HALT: Check main application integration
grep -r "NewComponentType" cmd/ --include="*.go"
# RULE: If ZERO results, integration is required before proceeding
```

### **CHECKPOINT D: Build Error Investigation**
**TRIGGER**: User reports build errors or undefined symbols
**MANDATORY ACTION**:
```bash
# HALT: Execute comprehensive symbol analysis
codebase_search "[undefined_symbol] usage patterns and dependencies"
grep -r "[undefined_symbol]" . --include="*.go" -n
# RULE: NO implementation without user approval after complete analysis
```
**REQUIRED REPORT FORMAT**:
```
üö® UNDEFINED SYMBOL ANALYSIS:
Symbol: [undefined_symbol]
References found: [N files]
Dependent infrastructure: [list missing types/functions]
Scope: [minimal/medium/extensive]

OPTIONS:
A) Implement complete infrastructure ([X] files affected)
B) Create minimal stub (may break [Y] files)  
C) Alternative approach: [suggest]

Which approach should I take?
```

---

## üõ†Ô∏è **MANDATORY TOOL USAGE PATTERN**

**AI must ALWAYS use tools in this sequence for any code generation:**

### **Step 1: Discovery (REQUIRED)**
```
codebase_search "existing [ComponentType] implementations"
# OR
grep -r "[TypeName]" pkg/ --include="*.go"
```

### **Step 2: Type Validation (REQUIRED)**
```
read_file pkg/path/to/type_definition.go
# Verify all referenced fields exist in struct definitions
```

### **Step 3: Integration Check (REQUIRED)**
```
grep -r "[NewType]" cmd/ --include="*.go"
# Verify business code is used in main applications
```

---

## üö´ **FORBIDDEN AI ACTIONS - IMMEDIATE FAILURE CONDITIONS**

**NEVER DO THESE:**
1. **NEVER** reference struct fields without first reading the type definition file
2. **NEVER** assume testutil types exist - always validate with `read_file` or `grep`
3. **NEVER** create test code without first using `codebase_search` for existing implementations
4. **NEVER** generate business types without confirming main application usage
5. **NEVER** proceed if any validation step fails
6. **NEVER** implement missing types without full dependency analysis (CHECKPOINT D)

---

## üìã **MANDATORY VALIDATION SEQUENCE**

**AI must execute these steps IN ORDER before any code generation:**

### **Validation Step 1: Existence Check**
```bash
# For struct field references (e.g., node.Name)
read_file pkg/workflow/engine/workflow_simulator.go
# RULE: Verify field exists in struct definition before referencing

# For testutil types (e.g., testutil.TDDConversionHelper)
grep -r "TDDConversionHelper" pkg/testutil/ --include="*.go"
# RULE: Confirm type exists before using
```

### **Validation Step 2: Implementation Discovery**
```bash
# Before creating new test structures
codebase_search "existing WorkflowSimulator test patterns"
# RULE: Enhance existing patterns instead of creating new ones
```

### **Validation Step 3: Integration Verification**
```bash
# For new business types
grep -r "NewBusinessType" cmd/ --include="*.go"
# RULE: Business code must be integrated in main applications
```

### **Validation Step 4: Build Error Analysis (CHECKPOINT D)**
```bash
# For any undefined symbol error
codebase_search "[undefined_symbol] usage patterns across codebase"
grep -r "[undefined_symbol]" . --include="*.go" -n
# Find constructor patterns
grep -r "New[SymbolName]\|Create[SymbolName]" . --include="*.go"
# Test compilation impact
go build [dependent_file.go] 2>&1
# RULE: Present complete analysis before implementation
```

---

## ‚úÖ **MANDATORY DECISION GATES**

**AI must answer YES to ALL questions before proceeding:**

### **For Type References:**
- ‚úÖ Have I read the actual type definition file?
- ‚úÖ Do all referenced fields exist in the struct?
- ‚úÖ Are there no empty struct{} definitions?

### **For Test Creation:**
- ‚úÖ Have I searched for existing test patterns?
- ‚úÖ Am I following TDD RED-GREEN-REFACTOR sequence?
- ‚úÖ Do all testutil dependencies actually exist?

### **For Business Code:**
- ‚úÖ Is this integrated into main applications?
- ‚úÖ Are all interfaces implemented by real code?
- ‚úÖ Have I verified the complete dependency chain?

### **For Build Error Fixes (CHECKPOINT D):**
- ‚úÖ Have I analyzed ALL references to the undefined symbol?
- ‚úÖ Have I mapped the complete dependency chain?
- ‚úÖ Have I presented options A/B/C to the user?
- ‚úÖ Have I received explicit approval before implementing?

---

## üîß **TOOL CALL ENFORCEMENT**

### **BLOCKING TOOL REQUIREMENTS**

**AI MUST use these tool calls BEFORE any code generation. No exceptions:**

**For ANY struct field reference (object.FieldName):**
```xml
<function_calls>
<invoke name="read_file">
<parameter name="target_file">pkg/workflow/engine/types.go</parameter>
</invoke>
</function_calls>
```

**For ANY undefined symbol error:**
```xml
<function_calls>
<invoke name="codebase_search">
<parameter name="query">[symbol_name] usage patterns and dependencies</parameter>
<parameter name="target_directories">[]</parameter>
</invoke>
</function_calls>
```

---

## üö® **REAL-TIME CATASTROPHIC PROBLEM PREVENTION**

**These problems are prevented DURING the session through mandatory validation:**

### **CATASTROPHIC PROBLEMS PREVENTED:**
1. **Undefined Field References** ‚Üí PREVENTED by reading type definitions BEFORE referencing fields
2. **Missing Dependencies** ‚Üí PREVENTED by validating testutil existence BEFORE using
3. **Orphaned Business Code** ‚Üí PREVENTED by confirming main app integration BEFORE implementation
4. **Build Cascade Failures** ‚Üí PREVENTED by comprehensive symbol analysis BEFORE fixing
5. **Mock-Only Implementations** ‚Üí PREVENTED by validating real business logic usage
6. **Incomplete TDD Coverage** ‚Üí PREVENTED by mandatory BR-XXX-XXX mapping
7. **Integration Gaps** ‚Üí PREVENTED by main application usage verification
8. **Type Safety Violations** ‚Üí PREVENTED by struct field existence validation

### **SESSION-TIME ENFORCEMENT TRIGGERS:**
Every time AI is about to:
- Reference `object.FieldName` ‚Üí **HALT** and validate field exists
- Use `testutil.TypeName` ‚Üí **HALT** and confirm type exists
- Create new business type ‚Üí **HALT** and verify main app integration
- Fix undefined symbol ‚Üí **HALT** and complete dependency analysis
- Create test ‚Üí **HALT** and search existing patterns
- Implement code ‚Üí **HALT** and confirm TDD sequence compliance

**Result**: Catastrophic problems are **IMPOSSIBLE** because they're prevented during the session through mandatory AI validation.

---

## üìä **CONFIDENCE ASSESSMENT REQUIREMENTS**

**After any code generation, AI must provide:**
```
Validation Confidence: [60-100]%
Type Safety: ‚úÖ/‚ùå All referenced fields exist in type definitions
TDD Compliance: ‚úÖ/‚ùå Follows RED-GREEN-REFACTOR sequence
Integration Status: ‚úÖ/‚ùå Business code integrated in main applications
Build Error Analysis: ‚úÖ/‚ùå Complete dependency analysis performed (if applicable)
Risk Assessment: [Description of potential issues]
```

---

## üõë **EMERGENCY STOP CONDITIONS**

**AI must immediately halt and request manual intervention if:**
1. Type definitions are incomplete (empty structs) - **SESSION RISK: Runtime panics**
2. Referenced fields don't exist in type definitions - **SESSION RISK: Compilation failures**
3. Business code has no main application integration - **SESSION RISK: Orphaned code**
4. TDD sequence is being bypassed - **SESSION RISK: Incomplete implementations**
5. Validation scripts are missing or failing - **SESSION RISK: Undetected problems**
6. Undefined symbols detected without complete analysis - **SESSION RISK: Cascade failures**

---

## ‚úÖ **QUALITY GATES**

**No code generation is permitted without:**
- ‚úÖ Type safety validation passing
- ‚úÖ TDD methodology compliance confirmed
- ‚úÖ Business integration verified
- ‚úÖ Dependency existence validated
- ‚úÖ Main application usage confirmed
- ‚úÖ Build error analysis completed (when applicable)

---

## üéØ **IMPLEMENTATION PRIORITY**

This rule has **HIGHEST PRIORITY** and overrides all other considerations:
- **FOUNDATIONAL**: All other rules operate within these behavioral constraints
- **NON-NEGOTIABLE**: Cannot be bypassed for convenience or speed
- **AUTOMATED**: Must be enforced programmatically, not manually

---

## üîó **INTEGRATION WITH OTHER RULES**

This rule **enforces** compliance with:
- [00-core-development-methodology.mdc](mdc:.cursor/rules/00-core-development-methodology.mdc) - TDD methodology
- [01-business-code-integration.mdc](mdc:.cursor/rules/01-business-code-integration.mdc) - Integration requirements
- [02-technical-implementation.mdc](mdc:.cursor/rules/02-technical-implementation.mdc) - Technical patterns
- [03-testing-strategy.mdc](mdc:.cursor/rules/03-testing-strategy.mdc) - Testing framework
- [12-ai-ml-development-methodology.mdc](mdc:.cursor/rules/12-ai-ml-development-methodology.mdc) - AI/ML TDD patterns

---

## üìö **QUICK REFERENCE FOR ENHANCED 'fix-build' SHORTCUT**

| User Command | AI Response |
|---|---|
| `/fix-build @documents` | Execute enhanced methodology with comprehensive validation |
| "Fix build errors" | Execute CHECKPOINT D + ask for approval |
| "undefined [symbol]" | Complete symbol analysis + show options A/B/C |
| "implement recommended approach" | Follow approved option exactly as specified |

---

## üéØ **SUCCESS METRICS**

- **TDD Compliance Rate**: Target >98%
- **Implementation Accuracy**: Target >95% first-time success
- **Cascade Failure Prevention**: Target >99% prevention rate
- **Business Requirement Coverage**: Target 100% mapping
- **Methodology Compliance**: Target 100% enforcement

**Priority**: FOUNDATIONAL - This rule prevents cascade failures and incomplete implementations