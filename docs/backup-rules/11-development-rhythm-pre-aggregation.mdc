---
description: "Mandatory development rhythm and phase validation for kubernaut"
---
# Development Rhythm

## Mandatory Phases - SEQUENCE REQUIRED

**Rule**: Follow RED-GREEN-REFACTOR with integration during GREEN
**Validation**: `./scripts/validate-tdd-completeness.sh "BR-XXX-XXX"`

## Development Sequence

### Decision Matrix
| Phase | Duration | Action | Validation Tool |
|-------|----------|--------|----------------|
| **Discovery** | 5-10 min | Search existing components | `codebase_search "existing [Component] implementations"` |
| **TDD RED** | 10-15 min | Write failing tests | `./scripts/phase2-red-validation.sh` |
| **TDD GREEN** | 15-20 min | Minimal implementation + integration | `./scripts/phase3-green-validation.sh` |
| **TDD REFACTOR** | 20-30 min | Enhance existing code only | `./scripts/phase4-refactor-validation.sh` |
| **Validation** | 5-10 min | Run integration checks | `./scripts/run-integration-validation.sh` |

## Phase Requirements

### Discovery Phase - MANDATORY
```bash
# Component research before creation
codebase_search "existing [ComponentType] implementations in pkg/"
grep -r "[Component]" cmd/ pkg/workflow/ --include="*.go"

# Decision point: enhance vs create (requires justification)
```

### TDD RED Phase - MANDATORY
```bash
# Import existing business interfaces
# Call existing methods with expected signatures
# Validation: Tests MUST fail initially
go test ./path/to/test.go 2>&1 | grep "FAIL" || echo "❌ Tests not failing"
```

### TDD GREEN Phase - MANDATORY
```bash
# Minimal implementation + MANDATORY integration
# Component MUST appear in cmd/ applications
grep -r "NewComponent" cmd/ --include="*.go" || echo "❌ Missing integration"
```

### TDD REFACTOR Phase - MANDATORY
```bash
# Enhance existing code only (NO new types/methods/files)
# Integration MUST be preserved
git diff HEAD~1 | grep "^+type.*struct" && echo "❌ New types forbidden in REFACTOR"
```

## Validation Commands

### Phase Compliance Check
```bash
# Current phase validation
./scripts/phase2-red-validation.sh test_file.go      # RED phase
./scripts/phase3-green-validation.sh component_name  # GREEN phase
./scripts/phase4-refactor-validation.sh             # REFACTOR phase
```

### Integration Timing Validation
```bash
# Integration during GREEN (not REFACTOR)
COMPONENT_NAME="$1"
MAIN_USAGE=$(grep -r "$COMPONENT_NAME" cmd/ --include="*.go" | wc -l)
[ "$MAIN_USAGE" -eq 0 ] && echo "❌ Integration required in GREEN phase"
```

## Anti-Patterns - FORBIDDEN

### Phase Violations
- **Discovery Skip**: Creating without searching existing → Use `codebase_search` first
- **RED Skip**: Implementation without failing tests → Write tests first
- **GREEN Complexity**: Sophisticated logic in GREEN → Keep minimal, enhance in REFACTOR
- **REFACTOR Creation**: New types in REFACTOR → Enhance existing only
- **Integration Delay**: Component not integrated in GREEN → MANDATORY integration

### Rhythm Enforcement
```bash
# Pre-commit rhythm validation
./scripts/validate-development-rhythm.sh
echo "✅ Development rhythm compliance verified"
```

## Integration Points

**Enforces**: [00-project-guidelines.mdc](mdc:.cursor/rules/00-project-guidelines.mdc) TDD methodology
**Supports**: [03-testing-strategy.mdc](mdc:.cursor/rules/03-testing-strategy.mdc) business requirement testing
**Validates**: [07-business-code-integration.mdc](mdc:.cursor/rules/07-business-code-integration.mdc) integration timing
**Priority**: MANDATORY - controls WHEN all other rules apply