/*
Copyright 2025 Jordi Gil.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	interfaces "github.com/jordigilh/kubernaut/pkg/testutil/interfaces"
	mock "github.com/stretchr/testify/mock"
)

// VectorDatabase is an autogenerated mock type for the VectorDatabase type
type VectorDatabase struct {
	mock.Mock
}

// Close provides a mock function with no fields
func (_m *VectorDatabase) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *VectorDatabase) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetStats provides a mock function with given fields: ctx
func (_m *VectorDatabase) GetStats(ctx context.Context) (*interfaces.DatabaseStats, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetStats")
	}

	var r0 *interfaces.DatabaseStats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*interfaces.DatabaseStats, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *interfaces.DatabaseStats); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interfaces.DatabaseStats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: ctx, queryEmbedding, limit, threshold
func (_m *VectorDatabase) Search(ctx context.Context, queryEmbedding []float64, limit int, threshold float64) ([]interfaces.SimilarPattern, error) {
	ret := _m.Called(ctx, queryEmbedding, limit, threshold)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []interfaces.SimilarPattern
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []float64, int, float64) ([]interfaces.SimilarPattern, error)); ok {
		return rf(ctx, queryEmbedding, limit, threshold)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []float64, int, float64) []interfaces.SimilarPattern); ok {
		r0 = rf(ctx, queryEmbedding, limit, threshold)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interfaces.SimilarPattern)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []float64, int, float64) error); ok {
		r1 = rf(ctx, queryEmbedding, limit, threshold)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, embedding
func (_m *VectorDatabase) Store(ctx context.Context, embedding interface{}) error {
	ret := _m.Called(ctx, embedding)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, embedding)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, embedding
func (_m *VectorDatabase) Update(ctx context.Context, embedding interface{}) error {
	ret := _m.Called(ctx, embedding)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, embedding)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewVectorDatabase creates a new instance of VectorDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVectorDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *VectorDatabase {
	mock := &VectorDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
