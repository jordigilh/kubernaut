apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-alerts-slm-test
  namespace: e2e-test
  labels:
    app: prometheus-alerts-slm
    environment: test
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus-alerts-slm
  template:
    metadata:
      labels:
        app: prometheus-alerts-slm
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: prometheus-alerts-slm
      containers:
      - name: prometheus-alerts-slm
        image: prometheus-alerts-slm:test
        imagePullPolicy: Never
        ports:
        - containerPort: 8080
          name: webhook
        - containerPort: 9090
          name: metrics
        env:
        - name: LOG_LEVEL
          value: "debug"
        - name: DRY_RUN
          value: "true"
        - name: WEBHOOK_PORT
          value: "8080"
        - name: METRICS_PORT
          value: "9090"
        - name: SLM_PROVIDER
          value: "mock"
        - name: SLM_MOCK_RESPONSE
          value: '{"action":"notify_only","parameters":{},"confidence":0.95,"reasoning":"E2E test mock response"}'
        resources:
          requests:
            memory: 64Mi
            cpu: 50m
          limits:
            memory: 128Mi
            cpu: 100m
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-alerts-slm-service
  namespace: e2e-test
  labels:
    app: prometheus-alerts-slm
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: webhook
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: metrics
  selector:
    app: prometheus-alerts-slm