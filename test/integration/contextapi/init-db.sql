-- Context API Integration Test Data
-- Purpose: Insert test data for Context API integration testing
-- Database: PostgreSQL 15+ with pgvector extension (reuses Data Storage Service infrastructure)
-- Schema: remediation_audit (defined in internal/database/schema/remediation_audit.sql)

-- NOTE: This script assumes remediation_audit table already exists
-- Schema is created by Data Storage Service initialization
-- See: internal/database/schema/remediation_audit.sql

-- Schema fields reference (from remediation_audit.sql):
-- - id, name, namespace, phase, action_type, status
-- - start_time, end_time, duration
-- - remediation_request_id, alert_fingerprint
-- - severity, environment, cluster_name, target_resource
-- - error_message, metadata
-- - embedding vector(384) -- sentence-transformers dimension
-- - created_at, updated_at

-- ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
-- TEST DATA INSERTION
-- ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

-- Insert test incidents for integration testing
-- NOTE: Using correct schema fields (name, target_resource, vector(384))
-- Scenario 1: Successful remediations in production namespace
INSERT INTO remediation_audit (
    remediation_request_id, alert_fingerprint, name, severity,
    namespace, cluster_name, environment, action_type, target_resource,
    phase, status, start_time, end_time, duration,
    embedding, metadata
) VALUES
-- High memory usage - successful remediation
(
    'rr-001', 'fp-001', 'HighMemoryUsage', 'critical',
    'production', 'prod-us-east-1', 'production', 'scale-deployment', 'deployment/webapp',
    'completed', 'success', NOW() - INTERVAL '2 hours', NOW() - INTERVAL '1 hour 55 minutes', 300000,
    -- Generate random embedding (384 dimensions for sentence-transformers)
    -- In production, this is generated by Data Storage Service
    (SELECT array_agg(random())::vector FROM generate_series(1, 384)),
    '{"description": "Pod memory usage exceeded 90% threshold"}'
),
-- Pod crash loop - successful restart
(
    'rr-002', 'fp-002', 'PodCrashLoop', 'critical',
    'production', 'prod-us-east-1', 'production', 'restart-pod', 'pod/webapp-7d9f6b',
    'completed', 'success', NOW() - INTERVAL '1 hour', NOW() - INTERVAL '55 minutes', 180000,
    (SELECT array_agg(random())::vector FROM generate_series(1, 384)),
    '{"description": "Pod crash loop detected with exit code 137"}'
),
-- Node disk pressure - successful cleanup
(
    'rr-003', 'fp-003', 'NodeDiskPressure', 'warning',
    'production', 'prod-us-east-1', 'production', 'cleanup-disk', 'node/worker-01',
    'completed', 'success', NOW() - INTERVAL '30 minutes', NOW() - INTERVAL '25 minutes', 120000,
    (SELECT array_agg(random())::vector FROM generate_series(1, 384)),
    '{"description": "Node disk usage exceeded 85% threshold"}'
),

-- Scenario 2: Failed remediations for failure analysis
-- Deployment failure
(
    'rr-004', 'fp-004', 'DeploymentFailure', 'critical',
    'production', 'prod-us-west-2', 'production', 'rollback-deployment', 'deployment/api-service',
    'failed', 'failure', NOW() - INTERVAL '45 minutes', NOW() - INTERVAL '40 minutes', 60000,
    (SELECT array_agg(random())::vector FROM generate_series(1, 384)),
    '{"description": "Deployment rollback failed due to missing previous revision", "error": "revision not found"}'
),
-- Network connectivity issue
(
    'rr-005', 'fp-005', 'ServiceUnavailable', 'critical',
    'production', 'prod-us-west-2', 'production', 'restart-service', 'service/frontend',
    'failed', 'failure', NOW() - INTERVAL '20 minutes', NOW() - INTERVAL '18 minutes', 45000,
    (SELECT array_agg(random())::vector FROM generate_series(1, 384)),
    '{"description": "Service restart failed due to network connectivity"}'
),

-- Scenario 3: Staging environment incidents
-- Database connection pool exhaustion
(
    'rr-006', 'fp-006', 'DatabaseConnectionPoolExhaustion', 'warning',
    'staging', 'staging-us-east-1', 'staging', 'scale-deployment', 'deployment/database-proxy',
    'completed', 'success', NOW() - INTERVAL '3 hours', NOW() - INTERVAL '2 hours 50 minutes', 240000,
    (SELECT array_agg(random())::vector FROM generate_series(1, 384)),
    '{"description": "Database connection pool reached 95% capacity"}'
),
-- API rate limit exceeded
(
    'rr-007', 'fp-007', 'APIRateLimitExceeded', 'warning',
    'staging', 'staging-us-east-1', 'staging', 'adjust-rate-limit', 'configmap/rate-limits',
    'completed', 'success', NOW() - INTERVAL '4 hours', NOW() - INTERVAL '3 hours 45 minutes', 180000,
    (SELECT array_agg(random())::vector FROM generate_series(1, 384)),
    '{"description": "API rate limit exceeded 1000 requests per minute"}'
),

-- Scenario 4: Development environment incidents
-- Container image pull failure
(
    'rr-008', 'fp-008', 'ImagePullBackOff', 'info',
    'development', 'dev-local', 'development', 'update-image-pull-secret', 'secret/registry-creds',
    'completed', 'success', NOW() - INTERVAL '6 hours', NOW() - INTERVAL '5 hours 50 minutes', 120000,
    (SELECT array_agg(random())::vector FROM generate_series(1, 384)),
    '{"description": "Container image pull failed due to expired credentials"}'
),

-- Scenario 5: Multiple namespaces for grouping tests
-- Namespace: monitoring
(
    'rr-009', 'fp-009', 'PrometheusDown', 'critical',
    'monitoring', 'prod-us-east-1', 'production', 'restart-pod', 'pod/prometheus-0',
    'completed', 'success', NOW() - INTERVAL '12 hours', NOW() - INTERVAL '11 hours 55 minutes', 150000,
    (SELECT array_agg(random())::vector FROM generate_series(1, 384)),
    '{"description": "Prometheus server unreachable"}'
),
-- Namespace: logging
(
    'rr-010', 'fp-010', 'LogstashDown', 'warning',
    'logging', 'prod-us-east-1', 'production', 'restart-pod', 'pod/logstash-0',
    'completed', 'success', NOW() - INTERVAL '8 hours', NOW() - INTERVAL '7 hours 55 minutes', 200000,
    (SELECT array_agg(random())::vector FROM generate_series(1, 384)),
    '{"description": "Logstash pipeline stopped processing"}'
),

-- Scenario 6: Recent incidents for trend analysis (last 7 days)
-- Day 1
(
    'rr-011', 'fp-011', 'HighCPUUsage', 'warning',
    'production', 'prod-us-east-1', 'production', 'scale-deployment', 'deployment/webapp',
    'completed', 'success', NOW() - INTERVAL '1 day', NOW() - INTERVAL '1 day' + INTERVAL '5 minutes', 300000,
    (SELECT array_agg(random())::vector FROM generate_series(1, 384)),
    '{"description": "CPU usage exceeded 80% for 5 minutes"}'
),
-- Day 2
(
    'rr-012', 'fp-012', 'HighCPUUsage', 'warning',
    'production', 'prod-us-east-1', 'production', 'scale-deployment', 'deployment/webapp',
    'completed', 'success', NOW() - INTERVAL '2 days', NOW() - INTERVAL '2 days' + INTERVAL '5 minutes', 310000,
    (SELECT array_agg(random())::vector FROM generate_series(1, 384)),
    '{"description": "CPU usage exceeded 80% for 5 minutes"}'
),
-- Day 3
(
    'rr-013', 'fp-013', 'HighMemoryUsage', 'critical',
    'production', 'prod-us-east-1', 'production', 'scale-deployment', 'deployment/webapp',
    'completed', 'success', NOW() - INTERVAL '3 days', NOW() - INTERVAL '3 days' + INTERVAL '5 minutes', 320000,
    (SELECT array_agg(random())::vector FROM generate_series(1, 384)),
    '{"description": "Memory usage exceeded 90% threshold"}'
),

-- Scenario 7: In-progress incidents for status filtering
(
    'rr-014', 'fp-014', 'NodeNotReady', 'critical',
    'production', 'prod-us-east-1', 'production', 'cordon-drain-node', 'node/worker-03',
    'processing', 'in_progress', NOW() - INTERVAL '5 minutes', NULL, NULL,
    (SELECT array_agg(random())::vector FROM generate_series(1, 384)),
    '{"description": "Node marked NotReady due to network issue"}'
),

-- Scenario 8: Pending incidents for phase filtering
(
    'rr-015', 'fp-015', 'PersistentVolumeClaimPending', 'warning',
    'production', 'prod-us-east-1', 'production', 'create-persistent-volume', 'pvc/data-volume',
    'pending', NULL, NOW() - INTERVAL '2 minutes', NULL, NULL,
    (SELECT array_agg(random())::vector FROM generate_series(1, 384)),
    '{"description": "PersistentVolumeClaim in pending state"}'
);

-- ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
-- VALIDATION QUERIES
-- ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

-- Verify data insertion
DO $$
DECLARE
    record_count INTEGER;
    embedding_count INTEGER;
BEGIN
    SELECT COUNT(*) INTO record_count FROM remediation_audit;
    SELECT COUNT(*) INTO embedding_count FROM remediation_audit WHERE embedding IS NOT NULL;

    RAISE NOTICE 'Total records: %', record_count;
    RAISE NOTICE 'Records with embeddings: %', embedding_count;

    IF record_count < 15 THEN
        RAISE EXCEPTION 'Test data insertion failed: expected 15+ records, got %', record_count;
    END IF;

    IF embedding_count < 15 THEN
        RAISE EXCEPTION 'Embedding generation failed: expected 15+ embeddings, got %', embedding_count;
    END IF;
END $$;

-- Display test data summary
SELECT
    namespace,
    COUNT(*) as incident_count,
    COUNT(CASE WHEN phase = 'completed' AND status = 'success' THEN 1 END) as successful,
    COUNT(CASE WHEN phase = 'failed' THEN 1 END) as failed,
    COUNT(CASE WHEN phase = 'processing' THEN 1 END) as in_progress,
    COUNT(CASE WHEN phase = 'pending' THEN 1 END) as pending
FROM remediation_audit
GROUP BY namespace
ORDER BY incident_count DESC;

-- ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
-- TEST DATA INSERTION COMPLETE
-- ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
-- Infrastructure: Reuses Data Storage Service PostgreSQL (localhost:5432)
-- Schema: remediation_audit (internal/database/schema/remediation_audit.sql)
-- Test Data: 15 incident records with embeddings (vector(384))
-- Usage: Execute via suite_test.go BeforeEach to populate test data
-- Isolation: Uses separate test schema (contextapi_test_XXX)
-- Ready for Context API integration testing!
-- ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

