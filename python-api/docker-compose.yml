version: '3.8'

services:
  # HolmesGPT REST API
  holmesgpt-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    ports:
      - "8000:8000"  # API port
      - "9090:9090"  # Metrics port
    environment:
      - ENVIRONMENT=development
      - DEBUG_MODE=true
      - LOG_LEVEL=DEBUG
      - LOG_FORMAT=text
      - HOLMES_CLI_PATH=holmes
      - HOLMES_DIRECT_IMPORT=true
      - HOLMES_CLI_FALLBACK=true
      - OLLAMA_URL=http://ollama:11434
      - PROMETHEUS_URL=http://prometheus:9090
      - ALERTMANAGER_URL=http://alertmanager:9093
      - ENABLE_DOCS=true
      - METRICS_ENABLED=true
      - CACHE_ENABLED=true
    volumes:
      - .:/app
      - /tmp/holmes-sessions:/tmp/holmes-sessions
    depends_on:
      - ollama
      - redis
    networks:
      - holmes-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Ollama for LLM inference
  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    environment:
      - OLLAMA_ORIGINS=*
    volumes:
      - ollama-data:/root/.ollama
      - ./models:/models
    networks:
      - holmes-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
        limits:
          memory: 8G

  # Redis for caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - holmes-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9091:9090"  # Different port to avoid conflicts
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - holmes-network
    restart: unless-stopped
    depends_on:
      - holmesgpt-api

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    networks:
      - holmes-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
    networks:
      - holmes-network
    restart: unless-stopped
    depends_on:
      - holmesgpt-api
    profiles:
      - production

  # Development tools container
  dev-tools:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    volumes:
      - .:/app
    working_dir: /app
    command: sleep infinity
    networks:
      - holmes-network
    profiles:
      - development

volumes:
  ollama-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  holmes-network:
    driver: bridge
    name: holmes-network
