name: Tests and Quality Checks

on:
  push:
    branches: [ main, master, 'feature/*' ]
  pull_request:
    branches: [ main, master ]

jobs:
  package-naming-verification:
    name: Verify Test Package Naming Convention
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Verify test package naming convention
        run: |
          chmod +x ./scripts/verify-test-package-names.sh
          ./scripts/verify-test-package-names.sh

      - name: Report status
        if: failure()
        run: |
          echo "‚ùå Test package naming violations detected!"
          echo "Run './scripts/fix-test-package-names.sh' to fix violations"
          exit 1

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: package-naming-verification
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run unit tests
        run: |
          # Run tests with coverage
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
        continue-on-error: true  # Don't fail the build on test failures yet

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    needs: package-naming-verification
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Run go fmt
        run: |
          if [ -n "$(gofmt -l .)" ]; then
            echo "‚ùå Go code is not formatted. Run 'make fmt'"
            gofmt -l .
            exit 1
          fi

      - name: Run go vet
        run: go vet ./...
        continue-on-error: true  # Don't fail on vet errors yet (pre-existing issues)

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m
        continue-on-error: true  # Don't fail on lint errors yet

  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: package-naming-verification
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Build all binaries
        run: |
          echo "Building all Go binaries..."
          go build -v ./cmd/...
        continue-on-error: false  # Fail if build fails

  summary:
    name: Quality Check Summary
    runs-on: ubuntu-latest
    needs: [package-naming-verification, unit-tests, lint, build]
    if: always()
    steps:
      - name: Check results
        run: |
          echo "‚úÖ Package naming verification: ${{ needs.package-naming-verification.result }}"
          echo "üìä Unit tests: ${{ needs.unit-tests.result }}"
          echo "üîç Lint: ${{ needs.lint.result }}"
          echo "üî® Build: ${{ needs.build.result }}"

          if [ "${{ needs.package-naming-verification.result }}" != "success" ]; then
            echo "‚ùå Package naming verification failed - this is blocking"
            exit 1
          fi

          if [ "${{ needs.build.result }}" != "success" ]; then
            echo "‚ùå Build failed - this is blocking"
            exit 1
          fi

          echo "‚úÖ All blocking checks passed!"


