#!/bin/bash
# resolve-rule-conflict.sh - Automated rule conflict resolution

RULE_1="$1"
RULE_2="$2"
CONTEXT="$3"  # integration, tdd-phase, ai-component, platform-component, general

if [ -z "$RULE_1" ] || [ -z "$RULE_2" ] || [ -z "$CONTEXT" ]; then
    echo "‚ùå ERROR: Missing required parameters"
    echo "Usage: $0 <rule1> <rule2> <context>"
    echo ""
    echo "Contexts: integration, tdd-phase, ai-component, platform-component, general"
    echo ""
    echo "Examples:"
    echo "$0 'Rule 03: TDD REFACTOR' 'Rule 04: AI sophistication' ai-component"
    echo "$0 'Rule 02: Mock externals' 'Rule 03: Test real business' tdd-phase"
    exit 1
fi

echo "ü§î Resolving conflict between $RULE_1 and $RULE_2 in context: $CONTEXT"
echo "======================================================================="

case $CONTEXT in
    "integration")
        echo "üîó INTEGRATION PRIORITY APPLIED"
        echo ""
        echo "Winner: Integration rules (00/07/11) override $RULE_1 and $RULE_2"
        echo ""
        echo "üìã RESOLUTION STEPS:"
        echo "1. PAUSE: Stop current implementation"
        echo "2. INTEGRATE: Add component to main application (cmd/)"
        echo "3. VALIDATE: Run ./scripts/run-integration-validation.sh"
        echo "4. RESUME: Continue with original rule implementation"
        echo ""
        echo "PRINCIPLE: Integration ALWAYS takes precedence over sophistication"
        echo ""
        echo "üîß IMMEDIATE ACTIONS:"
        echo "- Check cmd/kubernaut/main.go for component instantiation"
        echo "- Check cmd/kubernaut/main.go for component usage"
        echo "- Verify component is wired into main application flow"
        ;;
    "tdd-phase")
        echo "üß™ TDD PHASE CONTROL APPLIED"
        echo ""
        echo "Winner: TDD methodology rules (03/11/12) control timing"
        echo ""
        echo "üìã RESOLUTION STEPS:"
        echo "1. IDENTIFY: Current TDD phase (RED/GREEN/REFACTOR)"
        echo "2. APPLY: Phase-specific rules"
        echo "3. DEFER: Activities not appropriate for current phase"
        echo "4. VALIDATE: Phase completion before proceeding"
        echo ""
        echo "PRINCIPLE: TDD phases control WHEN rules apply"
        echo ""
        echo "üîß PHASE-SPECIFIC ACTIONS:"
        echo "RED: Write failing tests, use existing interfaces"
        echo "GREEN: Minimal implementation + integration"
        echo "REFACTOR: Enhance existing (no new types/methods/files)"
        ;;
    "ai-component")
        echo "ü§ñ AI/ML COMPONENT RESOLUTION APPLIED"
        echo ""
        echo "Winner: Rule 12 (AI/ML TDD) ‚Üí Rule 04 (AI patterns) ‚Üí Rule 02 (standards)"
        echo ""
        echo "üìã RESOLUTION STEPS:"
        echo "1. APPLY: Rule 12 AI/ML TDD methodology"
        echo "2. FOLLOW: AI-specific development phases"
        echo "3. VALIDATE: AI integration during GREEN phase"
        echo "4. ENHANCE: AI sophistication during REFACTOR"
        echo ""
        echo "PRINCIPLE: AI components follow specialized methodology"
        echo ""
        echo "üîß AI-SPECIFIC ACTIONS:"
        echo "- Use ./scripts/ai-component-discovery.sh before starting"
        echo "- Follow ./scripts/validate-ai-development.sh for each phase"
        echo "- Mock external AI APIs, test real AI business logic"
        echo "- Integrate AI client in main app during GREEN phase"
        ;;
    "platform-component")
        echo "‚öôÔ∏è PLATFORM SAFETY RESOLUTION APPLIED"
        echo ""
        echo "Winner: Rule 05 (K8s safety) ‚Üí Rule 03 (TDD) ‚Üí Rule 07 (integration)"
        echo ""
        echo "üìã RESOLUTION STEPS:"
        echo "1. PRIORITIZE: Safety-critical operations"
        echo "2. FOLLOW: TDD methodology with safety focus"
        echo "3. ENSURE: Integration with safety validation"
        echo "4. VALIDATE: Dry-run and safety checks"
        echo ""
        echo "PRINCIPLE: Safety overrides speed for platform operations"
        echo ""
        echo "üîß PLATFORM-SPECIFIC ACTIONS:"
        echo "- Implement dry-run mode first"
        echo "- Add comprehensive error handling"
        echo "- Include rollback mechanisms"
        echo "- Test with non-destructive operations"
        ;;
    "general")
        echo "üìù GENERAL CONFLICT RESOLUTION APPLIED"
        echo ""
        echo "Winner: Core rules ‚Üí Technical rules ‚Üí Quality rules"
        echo ""
        echo "üìã PRIORITY HIERARCHY:"
        echo "1. CORE: Rules 00 (Guidelines), 03 (TDD), 07 (Integration), 11 (Rhythm)"
        echo "2. TECHNICAL: Rules 02 (Go), 04 (AI/ML), 05 (K8s), 12 (AI TDD)"
        echo "3. QUALITY: Rules 06 (Docs), 08 (Anti-patterns), 09 (Interface)"
        echo ""
        echo "PRINCIPLE: Core rules establish foundation, technical rules provide implementation"
        echo ""
        echo "üîß GENERAL RESOLUTION:"
        echo "- Core rules take precedence over technical preferences"
        echo "- Technical rules take precedence over quality optimizations"
        echo "- When rules at same level conflict, ask for input with recommendation"
        ;;
    *)
        echo "‚ùì UNKNOWN CONTEXT: Manual resolution required"
        echo ""
        echo "üìã GENERAL GUIDELINES:"
        echo "1. Integration > TDD > Component-specific > Quality"
        echo "2. Safety > Speed > Sophistication"
        echo "3. Business requirements > Technical preferences"
        echo "4. Explicit rules > Implicit assumptions"
        echo ""
        echo "üîß MANUAL RESOLUTION STEPS:"
        echo "1. Identify which category each rule belongs to"
        echo "2. Apply priority hierarchy"
        echo "3. Document resolution decision"
        echo "4. Update rules if pattern emerges"
        ;;
esac

echo ""
echo "======================================================================="
echo "‚úÖ Conflict resolution guidance provided"
echo ""
echo "üîÑ NEXT STEPS:"
echo "1. Apply the resolution steps above"
echo "2. Validate with appropriate scripts"
echo "3. Document any new patterns discovered"
echo "4. Continue development with resolved approach"
