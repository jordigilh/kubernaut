// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	interfaces "github.com/jordigilh/kubernaut/pkg/testutil/interfaces"
	mock "github.com/stretchr/testify/mock"
)

// SafetyValidator is an autogenerated mock type for the SafetyValidator type
type SafetyValidator struct {
	mock.Mock
}

// AssessActionRisk provides a mock function with given fields: ctx, action
func (_m *SafetyValidator) AssessActionRisk(ctx context.Context, action interface{}) (*interfaces.RiskAssessment, error) {
	ret := _m.Called(ctx, action)

	if len(ret) == 0 {
		panic("no return value specified for AssessActionRisk")
	}

	var r0 *interfaces.RiskAssessment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (*interfaces.RiskAssessment, error)); ok {
		return rf(ctx, action)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) *interfaces.RiskAssessment); ok {
		r0 = rf(ctx, action)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interfaces.RiskAssessment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, action)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuditSafetyOperation provides a mock function with given fields: ctx, operation
func (_m *SafetyValidator) AuditSafetyOperation(ctx context.Context, operation interfaces.SafetyAuditEntry) error {
	ret := _m.Called(ctx, operation)

	if len(ret) == 0 {
		panic("no return value specified for AuditSafetyOperation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.SafetyAuditEntry) error); ok {
		r0 = rf(ctx, operation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSafetyPolicies provides a mock function with no fields
func (_m *SafetyValidator) GetSafetyPolicies() []interfaces.SafetyPolicy {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSafetyPolicies")
	}

	var r0 []interfaces.SafetyPolicy
	if rf, ok := ret.Get(0).(func() []interfaces.SafetyPolicy); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interfaces.SafetyPolicy)
		}
	}

	return r0
}

// ValidateClusterAccess provides a mock function with given fields: ctx, config
func (_m *SafetyValidator) ValidateClusterAccess(ctx context.Context, config interface{}) (*interfaces.ClusterValidationResult, error) {
	ret := _m.Called(ctx, config)

	if len(ret) == 0 {
		panic("no return value specified for ValidateClusterAccess")
	}

	var r0 *interfaces.ClusterValidationResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (*interfaces.ClusterValidationResult, error)); ok {
		return rf(ctx, config)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) *interfaces.ClusterValidationResult); ok {
		r0 = rf(ctx, config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interfaces.ClusterValidationResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateResourceState provides a mock function with given fields: ctx, resourceID
func (_m *SafetyValidator) ValidateResourceState(ctx context.Context, resourceID string) (*interfaces.ResourceValidationResult, error) {
	ret := _m.Called(ctx, resourceID)

	if len(ret) == 0 {
		panic("no return value specified for ValidateResourceState")
	}

	var r0 *interfaces.ResourceValidationResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*interfaces.ResourceValidationResult, error)); ok {
		return rf(ctx, resourceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *interfaces.ResourceValidationResult); ok {
		r0 = rf(ctx, resourceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interfaces.ResourceValidationResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, resourceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateRollback provides a mock function with given fields: ctx, rollbackData
func (_m *SafetyValidator) ValidateRollback(ctx context.Context, rollbackData interface{}) (*interfaces.RollbackValidationResult, error) {
	ret := _m.Called(ctx, rollbackData)

	if len(ret) == 0 {
		panic("no return value specified for ValidateRollback")
	}

	var r0 *interfaces.RollbackValidationResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (*interfaces.RollbackValidationResult, error)); ok {
		return rf(ctx, rollbackData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) *interfaces.RollbackValidationResult); ok {
		r0 = rf(ctx, rollbackData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interfaces.RollbackValidationResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, rollbackData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSafetyValidator creates a new instance of SafetyValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSafetyValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *SafetyValidator {
	mock := &SafetyValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
