<<<<<<< HEAD
=======
/*
Copyright 2025 Jordi Gil.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

>>>>>>> crd_implementation
package workflow

import "time"

// WorkflowCreationRequest represents a workflow creation request from AI Analysis Service (8082)
// Per APPROVED_MICROSERVICES_ARCHITECTURE.md: AI service sends pre-analyzed workflow requests
type WorkflowCreationRequest struct {
	AlertID          string                 `json:"alert_id"`
	AIAnalysis       *AIAnalysisResult      `json:"ai_analysis"`
	WorkflowTemplate *WorkflowTemplate      `json:"workflow_template"`
	Priority         string                 `json:"priority,omitempty"`
	Timeout          time.Duration          `json:"timeout,omitempty"`
	Metadata         map[string]interface{} `json:"metadata,omitempty"`
	// Microservices architecture fields
	SourceService string `json:"source_service,omitempty"`
	ServicePort   int    `json:"service_port,omitempty"`
}

// AIAnalysisResult represents the AI analysis result from AI Analysis Service (8082)
// This is received FROM the AI service, not generated by the workflow service
type AIAnalysisResult struct {
	Confidence         float64                `json:"confidence"`
	RecommendedActions []ActionRecommendation `json:"recommended_actions"`
	Reasoning          string                 `json:"reasoning,omitempty"`
	RiskAssessment     string                 `json:"risk_assessment,omitempty"`
	EstimatedDuration  time.Duration          `json:"estimated_duration,omitempty"`
	Metadata           map[string]interface{} `json:"metadata,omitempty"`
	// Enhanced fields for comprehensive testing
	AnalysisID       string            `json:"analysis_id,omitempty"`
	SafetyValidation *SafetyValidation `json:"safety_validation,omitempty"`
}

// ActionRecommendation represents a single action recommendation from AI analysis
type ActionRecommendation struct {
	Action     string                 `json:"action"`
	Parameters map[string]interface{} `json:"parameters"`
	Confidence float64                `json:"confidence"`
	Reasoning  string                 `json:"reasoning,omitempty"`
	Priority   string                 `json:"priority,omitempty"`
	Timeout    time.Duration          `json:"timeout,omitempty"`
}

// WorkflowTemplate represents a workflow template for execution
type WorkflowTemplate struct {
	Name        string                 `json:"name"`
	Description string                 `json:"description"`
	Priority    string                 `json:"priority"`
	Tags        []string               `json:"tags,omitempty"`
	Metadata    map[string]interface{} `json:"metadata,omitempty"`
	// Enhanced fields for comprehensive testing
	Version string        `json:"version,omitempty"`
	Timeout time.Duration `json:"timeout,omitempty"`
}

// K8sExecutorRequest represents a request to K8s Executor Service (8084)
// Per APPROVED_MICROSERVICES_ARCHITECTURE.md: Workflow service sends execution commands to K8s executor
type K8sExecutorRequest struct {
	ActionID   string                 `json:"action_id"`
	Action     string                 `json:"action"`
	Parameters map[string]interface{} `json:"parameters"`
	WorkflowID string                 `json:"workflow_id"`
	Timeout    time.Duration          `json:"timeout,omitempty"`
	DryRun     bool                   `json:"dry_run,omitempty"`
	Metadata   map[string]interface{} `json:"metadata,omitempty"`
}

// K8sExecutorResponse represents a response from K8s Executor Service (8084)
type K8sExecutorResponse struct {
	ActionID      string                 `json:"action_id"`
	Success       bool                   `json:"success"`
	Status        string                 `json:"status"`
	Result        map[string]interface{} `json:"result,omitempty"`
	Error         string                 `json:"error,omitempty"`
	ExecutionTime time.Duration          `json:"execution_time"`
	Metadata      map[string]interface{} `json:"metadata,omitempty"`
}

// Enhanced types for comprehensive microservices testing

// SafetyValidation represents AI safety validation results
type SafetyValidation struct {
	Validated        bool     `json:"validated"`
	RiskLevel        string   `json:"risk_level"`
	ApprovalRequired bool     `json:"approval_required"`
	AIConfidence     float64  `json:"ai_confidence,omitempty"`
	ValidationRules  []string `json:"validation_rules,omitempty"`
}

// WorkflowCreationRequest enhanced for microservices architecture
type WorkflowCreationRequestEnhanced struct {
	WorkflowCreationRequest
	SourceService string `json:"source_service"`
	ServicePort   int    `json:"service_port"`
}
