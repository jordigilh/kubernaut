apiVersion: apps/v1
kind: Deployment
metadata:
  name: holmesgpt
  namespace: kubernaut-integration
  labels:
    app: holmesgpt
    component: ai-analysis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: holmesgpt
  template:
    metadata:
      labels:
        app: holmesgpt
        component: ai-analysis
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8090"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: holmesgpt
        image: kubernaut/holmesgpt-api:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8090
          name: http
        env:
        - name: PORT
          value: "8090"
        - name: LLM_ENDPOINT
          value: "http://192.168.1.169:8080"
        - name: LLM_PROVIDER
          value: "ollama"
        - name: LLM_MODEL
          value: "hf://ggml-org/gpt-oss-20b-GGUF"
        - name: LOG_LEVEL
          value: "INFO"
        - name: PYTHONPATH
          value: "/app"
        - name: ENVIRONMENT
          value: "integration"
        # Database connection for HolmesGPT analysis storage
        - name: POSTGRES_HOST
          value: "postgresql-service"
        - name: POSTGRES_PORT
          value: "5432"
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: postgresql-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: postgresql-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-secret
              key: POSTGRES_PASSWORD
        # Redis for caching analysis results
        - name: REDIS_HOST
          value: "redis-service"
        - name: REDIS_PORT
          value: "6379"
        resources:
          requests:
            memory: "512Mi"
            cpu: "300m"
          limits:
            memory: "1Gi"
            cpu: "800m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8090
          initialDelaySeconds: 60
          periodSeconds: 15
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8090
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        # Security context
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # Python needs write access for temp files
          capabilities:
            drop:
            - ALL
      restartPolicy: Always
