<<<<<<< HEAD
=======
/*
Copyright 2025 Jordi Gil.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

>>>>>>> crd_implementation
// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	llm "github.com/jordigilh/kubernaut/pkg/ai/llm"

	mock "github.com/stretchr/testify/mock"
)

// LLMClient is an autogenerated mock type for the LLMClient type
type LLMClient struct {
	mock.Mock
}

// AnalyzeAlert provides a mock function with given fields: ctx, alert
func (_m *LLMClient) AnalyzeAlert(ctx context.Context, alert interface{}) (*llm.AnalyzeAlertResponse, error) {
	ret := _m.Called(ctx, alert)

	if len(ret) == 0 {
		panic("no return value specified for AnalyzeAlert")
	}

	var r0 *llm.AnalyzeAlertResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (*llm.AnalyzeAlertResponse, error)); ok {
		return rf(ctx, alert)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) *llm.AnalyzeAlertResponse); ok {
		r0 = rf(ctx, alert)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*llm.AnalyzeAlertResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, alert)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChatCompletion provides a mock function with given fields: ctx, prompt
func (_m *LLMClient) ChatCompletion(ctx context.Context, prompt string) (string, error) {
	ret := _m.Called(ctx, prompt)

	if len(ret) == 0 {
		panic("no return value specified for ChatCompletion")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, prompt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, prompt)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, prompt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEndpoint provides a mock function with no fields
func (_m *LLMClient) GetEndpoint() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEndpoint")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetMinParameterCount provides a mock function with no fields
func (_m *LLMClient) GetMinParameterCount() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMinParameterCount")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetModel provides a mock function with no fields
func (_m *LLMClient) GetModel() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetModel")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IsHealthy provides a mock function with no fields
func (_m *LLMClient) IsHealthy() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsHealthy")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// LivenessCheck provides a mock function with given fields: ctx
func (_m *LLMClient) LivenessCheck(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for LivenessCheck")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadinessCheck provides a mock function with given fields: ctx
func (_m *LLMClient) ReadinessCheck(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ReadinessCheck")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewLLMClient creates a new instance of LLMClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLLMClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *LLMClient {
	mock := &LLMClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
