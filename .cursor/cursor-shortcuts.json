{
	"shortcuts": [
		{
			"name": "Integrated Development Workflow",
			"trigger": "/develop",
			"description": "Evidence-based development workflow for routine and experienced development work",
			"command": "INTEGRATED DEVELOPMENT WORKFLOW - STREAMLINED EVIDENCE-BASED APDC:\n\n## 🔍 PHASE 1: EVIDENCE-BASED ANALYSIS (5-15 minutes)\n**Purpose**: Efficient requirement validation and context understanding\n\n### STREAMLINED ANALYZE-FIRST PROTOCOL:\n\n#### 🔍 **ANALYZING YOUR REQUEST:**\n- What is the user's actual business need or problem?\n- What assumptions am I making about their request?\n- What business requirement (BR-XXX-XXX) does this serve?\n\n#### 📚 **CHECKING EXISTING SOLUTIONS:**\n```bash\n# Recommended: Search existing solutions before building\ngrep -r \"[related_concepts]\" pkg/ cmd/ --include=\"*.go\"\n# Check project guidelines if uncertain\nread_file .cursor/rules/[relevant-rule].mdc\n```\n\n#### 🎯 **GAP ASSESSMENT:**\n- Do existing mechanisms already solve this problem?\n- Can existing code be enhanced instead of creating new?\n- Is the proposed approach necessary?\n\n#### 💡 **EVIDENCE-BASED RECOMMENDATION:**\n```\n📊 STREAMLINED ANALYSIS RESULTS:\n\n**REQUEST ANALYSIS**:\n- User Need: [clear problem statement]\n- Business Requirement: [BR-XXX-XXX or needs definition]\n- Key Assumptions: [main assumptions identified]\n\n**EXISTING SOLUTIONS**:\n- Similar Implementations: [components found in pkg/]\n- Existing Patterns: [approaches identified]\n- Integration Points: [main app usage found]\n\n**RECOMMENDATION**:\n□ Use existing solution: [specific component]\n□ Enhance existing code: [what to improve]\n□ Create new functionality: [justified need]\n□ Alternative approach: [different solution]\n```\n\n**ANALYSIS GATE**: ⚠️ For complex/uncertain requirements, consider `/develop-strict`\n\n---\n\n## 📋 PHASE 2: STRATEGIC PLANNING (10-20 minutes)\n**Purpose**: Focused implementation strategy with TDD mapping\n\n#### 🎯 **IMPLEMENTATION APPROACH:**\n```\n📋 IMPLEMENTATION STRATEGY:\nChosen Approach: [enhance existing/create new - based on analysis]\nJustification: [evidence from analysis]\nBusiness Alignment: [BR-XXX-XXX mapping]\n```\n\n#### ⏱️ **TDD PHASE MAPPING:**\n```\n🔄 TDD IMPLEMENTATION PLAN:\n\n**DO-DISCOVERY** (5-10 min): Analysis-guided component research\n**DO-RED** (10-15 min): Write failing tests for business requirements\n**DO-GREEN** (15-20 min): Minimal implementation + main app integration\n**DO-REFACTOR** (20-30 min): Enhance with sophisticated logic\n```\n\n#### 🎯 **SUCCESS CRITERIA:**\n```\n✅ SUCCESS CRITERIA:\n- Business Requirement: [BR-XXX-XXX outcomes to achieve]\n- Technical Success: Build passes, tests pass, integration verified\n- Quality: Lint compliance, reasonable coverage\n```\n\n**PLANNING GATE**: ❓ **User Approval**: Do you approve this plan? (YES/NO)\n\n---\n\n## ⚡ PHASE 3: CONTROLLED IMPLEMENTATION (Variable duration)\n**Purpose**: Systematic TDD execution following approved plan\n\n### Plan-Guided Execution\n**Proceed only with user approval from Phase 2**\n\n#### 🔍 **DO-DISCOVERY** (5-10 minutes):\n```bash\n# Execute planned component research\ngrep -r \"[integration patterns]\" cmd/ pkg/ --include=\"*.go\"\n# Validate analysis predictions\n```\n\n#### 🔴 **DO-RED** (10-15 minutes):\n```go\n// Plan-structured test creation with business requirement mapping\n// Framework: Ginkgo/Gomega BDD\nvar _ = Describe(\"BR-XXX-XXX: [Business Requirement]\", func() {\n    It(\"should [specific business behavior]\", func() {\n        // Test business outcomes\n        result, err := component.BusinessMethod(ctx, testData)\n        Expect(err).ToNot(HaveOccurred())\n        Expect(result.BusinessOutcome).To(BeExpected())\n    })\n})\n```\n\n#### 🟢 **DO-GREEN** (15-20 minutes):\n```go\n// Minimal implementation + main app integration\n// Integration in cmd/[application]/main.go:\nfunc main() {\n    component := factory(config)\n    server.AddComponent(component)\n}\n```\n\n#### 🔄 **DO-REFACTOR** (20-30 minutes):\n```go\n// Enhance existing implementation with sophisticated logic\nfunc (c *Component) BusinessMethod(ctx context.Context, input Type) (*ResultType, error) {\n    // Enhanced implementation with business logic\n    return enhanced_result, nil\n}\n```\n\n### Key Validation Points:\n- Tests pass: `go test ./...`\n- Integration confirmed: `grep -r \"ComponentName\" cmd/ --include=\"*.go\"`\n- Quality check: `golangci-lint run`\n\n---\n\n## ✅ PHASE 4: STREAMLINED VALIDATION (5-10 minutes)\n**Purpose**: Essential verification of implementation quality\n\n### 📊 **BUSINESS VERIFICATION:**\n```\n📊 BUSINESS VALIDATION:\n- Business Requirement: [BR-XXX-XXX satisfied ✅/❌]\n- Integration: [Component used in main applications ✅/❌]\n- Quality: [Build/test/lint status ✅/❌]\n```\n\n### 📈 **CONFIDENCE ASSESSMENT:**\n```\n🎯 CONFIDENCE ASSESSMENT:\n- Analysis Quality: [X%] (evidence-based approach)\n- Implementation: [Y%] (TDD methodology)\n- Integration: [Z%] (main app usage)\n\n**OVERALL CONFIDENCE**: [Average %]\n**JUSTIFICATION**: [Brief explanation of confidence level]\n```\n\n---\n\n## 🎯 **WHEN TO USE /develop:**\n\n**✅ RECOMMENDED FOR:**\n- Routine feature development with clear requirements\n- Enhancement of well-understood components\n- Experienced developers familiar with codebase\n- Medium complexity tasks with known patterns\n\n**❌ CONSIDER /develop-strict FOR:**\n- Unclear/complex requirements\n- New team members\n- Critical system components\n- Unknown technical territory\n\n**ESCALATION**: If issues arise during execution, consider switching to `/develop-strict`",
			"category": "development",
			"tags": [
				"development",
				"streamlined",
				"evidence-based",
				"routine",
				"experienced"
			]
		},
		{
			"name": "Strict Integrated Development Workflow",
			"trigger": "/develop-strict",
			"description": "Ironclad evidence-based development with mandatory tool execution and comprehensive validation",
			"command": "STRICT INTEGRATED DEVELOPMENT WORKFLOW - IRONCLAD EVIDENCE-BASED APDC:\n\n## 🚨 **IRONCLAD MODE ACTIVATED**\n**Purpose**: Maximum quality assurance with mandatory tool execution and comprehensive validation\n**Use for**: Complex requirements, critical components, new team members, uncertain technical territory\n\n## 🔍 PHASE 1: MANDATORY EVIDENCE-BASED ANALYSIS (10-20 minutes)\n**Purpose**: Comprehensive requirement validation with enforced tool usage\n\n### 🚫 BLOCKING REQUIREMENTS - AI MUST EXECUTE:\n\n#### 🔍 **ANALYZING YOUR REQUEST (MANDATORY):**\n- What is the user's actual business need or problem?\n- What assumptions am I making about their request?\n- What business requirement (BR-XXX-XXX) does this serve?\n\n#### 📚 **MANDATORY EXISTING SOLUTIONS DISCOVERY:**\n\n🚫 BLOCKING REQUIREMENT 1 - AI MUST EXECUTE:\n<function_calls>\n<invoke name=\"Grep\">\n<parameter name=\"pattern\">[USER_SPECIFIED_FUNCTIONALITY]</parameter>\n<parameter name=\"path\">pkg/</parameter>\n<parameter name=\"output_mode\">files_with_matches</parameter>\n</invoke>\n</function_calls>\n\n🚫 BLOCKING REQUIREMENT 2 - AI MUST EXECUTE:\n<function_calls>\n<invoke name=\"Task\">\n<parameter name=\"subagent_type\">general-purpose</parameter>\n<parameter name=\"description\">Comprehensive existing solution search</parameter>\n<parameter name=\"prompt\">Search the entire codebase for existing implementations related to [USER_SPECIFIED_FUNCTIONALITY]. Provide specific file paths, implementation details, and integration patterns found.</parameter>\n</invoke>\n</function_calls>\n\n🚫 BLOCKING REQUIREMENT 3 - AI MUST EXECUTE:\n<function_calls>\n<invoke name=\"Glob\">\n<parameter name=\"pattern\">**/*.go</parameter>\n<parameter name=\"path\">cmd/</parameter>\n</invoke>\n</function_calls>\n\n❌ STOP: Cannot proceed until all tool calls executed and results analyzed\n\n#### 🎯 **MANDATORY GAP ASSESSMENT:**\n```\n🔍 TOOL EXECUTION VERIFICATION:\n- [ ] Existing implementations searched ✅/❌\n- [ ] Integration patterns discovered ✅/❌  \n- [ ] Main applications analyzed ✅/❌\n- [ ] Project rules consulted ✅/❌\n\n❌ ANALYSIS GATE: All boxes must be ✅ to proceed\n```\n\n#### 💡 **EVIDENCE-BASED RECOMMENDATION (MANDATORY FORMAT):**\n```\n📊 COMPREHENSIVE EVIDENCE-BASED ANALYSIS:\n\n**REQUEST ANALYSIS**:\n- User Need: [clear problem statement]\n- Business Requirement: [BR-XXX-XXX or needs definition]\n- Assumptions Identified: [list all assumptions]\n\n**EXISTING SOLUTIONS FOUND** (from tool execution):\n- Similar Implementations: [N components found with file paths]\n- Existing Patterns: [established approaches with examples]\n- Project Guidelines: [relevant rules from .cursor/rules/]\n- Main App Usage: [integration points in cmd/ with specifics]\n\n**GAP ASSESSMENT**:\n- Existing Coverage: [detailed analysis of what's solved]\n- Actual Gap: [specific missing functionality]\n- Necessity Validation: [evidence-based justification]\n\n**RECOMMENDATION** (Evidence-Based):\n□ Use existing solution: [specific component with file path]\n□ Enhance existing code: [what to improve and where]\n□ Create new functionality: [justified need with evidence]\n□ Alternative approach: [evidence-based alternative]\n```\n\n🚫 **MANDATORY ANALYSIS COMPLETE GATE:**\n- [ ] Tool calls executed successfully ✅/❌\n- [ ] Evidence documented comprehensively ✅/❌  \n- [ ] Gap assessment completed with evidence ✅/❌\n- [ ] User confirmed understanding of analysis ✅/❌\n\n❌ STOP: Cannot proceed to PLAN phase until all checkboxes are ✅\n\n---\n\n## 📋 PHASE 2: MANDATORY STRATEGIC PLANNING (15-25 minutes)\n**Purpose**: Comprehensive implementation strategy with enforced validation\n\n### 🚫 BLOCKING PLANNING REQUIREMENTS:\n\n#### 🎯 **IMPLEMENTATION APPROACH SELECTION (MANDATORY):**\n```\n📋 EVIDENCE-DRIVEN IMPLEMENTATION STRATEGY:\nChosen Approach: [enhance existing/create new/hybrid - based on analysis]\nJustification: [specific evidence from Phase 1 analysis]\nBusiness Alignment: [BR-XXX-XXX mapping confirmed]\nRisk Assessment: [identified risks with mitigation]\n```\n\n#### ⏱️ **DETAILED TDD PHASE MAPPING (MANDATORY):**\n```\n🔄 COMPREHENSIVE TDD IMPLEMENTATION PLAN:\n\n**DO-DISCOVERY** (5-10 min):\n- Action: Execute analysis-guided component research\n- Focus: [specific areas identified in analysis]\n- Validation: Confirm analysis predictions with evidence\n- Tools: [specific tool calls planned]\n\n**DO-RED** (10-15 min):\n- Action: Write failing tests for [specific business requirements]\n- Framework: Ginkgo/Gomega BDD with BR-XXX-XXX mapping\n- Coverage: [X% of business logic planned]\n- Validation: Tests must fail initially\n\n**DO-GREEN** (15-20 min):\n- Action: Minimal implementation + mandatory main app integration\n- Integration: [specific cmd/ applications identified]\n- Validation: Tests pass, component appears in main apps\n- Quality: Basic functionality working\n\n**DO-REFACTOR** (20-30 min):\n- Action: Enhance with sophisticated logic\n- Focus: [performance, maintainability, business logic sophistication]\n- Validation: Improved quality while preserving integration\n- Constraints: No new types/interfaces\n```\n\n#### 🎯 **COMPREHENSIVE SUCCESS CRITERIA (MANDATORY):**\n```\n✅ DETAILED SUCCESS CRITERIA (Measurable):\n\n**Business Success**:\n- BR-XXX-XXX Requirements: [specific outcomes to achieve]\n- Business Value: [quantified benefits to deliver]\n- User Experience: [specific improvements expected]\n- Performance Targets: [measurable metrics to meet]\n\n**Technical Success**:\n- Build Status: All components compile without errors\n- Test Coverage: [X% unit, Y% integration coverage]\n- Integration: Component used in [N] main applications\n- Code Quality: Lint compliance and quality metrics\n- Performance: Response time within [Z]ms\n\n**Validation Checkpoints**:\n- Evidence-based validation: Analysis findings confirmed ✅/❌\n- Business integration: Main app usage verified ✅/❌\n- Quality gates: Build/test/lint/integration passed ✅/❌\n```\n\n#### 🛡️ **MANDATORY RISK MITIGATION:**\n```\n🛡️ COMPREHENSIVE RISK MITIGATION PLAN:\n\n**Identified Risks** (from analysis):\n- [Risk 1]: [specific mitigation strategy and contingency plan]\n- [Risk 2]: [prevention approach and monitoring method]\n- [Risk 3]: [detection mechanism and response procedure]\n\n**Rollback Procedures**:\n- Rollback trigger: [specific conditions requiring recovery]\n- Recovery steps: [detailed procedures to restore functionality]\n- Data protection: [how to preserve existing system state]\n- Validation: [how to confirm successful rollback]\n```\n\n🚫 **MANDATORY PLANNING COMPLETE GATE:**\n- [ ] Implementation strategy defined with evidence ✅/❌\n- [ ] TDD phases mapped with specific actions ✅/❌\n- [ ] Success criteria established with measurements ✅/❌\n- [ ] Risk mitigation strategies documented ✅/❌\n- [ ] Integration points identified and validated ✅/❌\n\n**PLANNING GATE**: 🚫 **MANDATORY USER APPROVAL REQUIRED**\n\n```\n🎯 COMPREHENSIVE IMPLEMENTATION PLAN SUMMARY:\nBusiness Need: [validated requirement with evidence]\nApproach: [evidence-based strategy with justification]\nTimeline: [realistic estimate with buffer]\nRisks: [identified and mitigated with specific plans]\nSuccess Criteria: [measurable outcomes defined]\n\n❓ **MANDATORY APPROVAL REQUEST**: Do you approve this comprehensive implementation plan? (YES/NO)\n```\n\n❌ STOP: Cannot proceed to implementation without explicit \"YES\" approval\n\n---\n\n## ⚡ PHASE 3: CONTROLLED IMPLEMENTATION WITH MANDATORY VALIDATION (Variable duration)\n**Purpose**: Systematic TDD execution with enforced checkpoints\n\n### 🚫 MANDATORY: Plan-Guided Execution Only\n**Only proceed with explicit user approval from Phase 2**\n\n#### 🔍 **DO-DISCOVERY (MANDATORY TOOL EXECUTION):**\n\n🚫 BLOCKING REQUIREMENT - AI MUST EXECUTE:\n<function_calls>\n<invoke name=\"Grep\">\n<parameter name=\"pattern\">[SPECIFIC_COMPONENTS_FROM_ANALYSIS]</parameter>\n<parameter name=\"path\">cmd/</parameter>\n<parameter name=\"output_mode\">content</parameter>\n<parameter name=\"-n\">true</parameter>\n</invoke>\n</function_calls>\n\n<function_calls>\n<invoke name=\"Grep\">\n<parameter name=\"pattern\">[INTEGRATION_PATTERNS_FOUND]</parameter>\n<parameter name=\"path\">pkg/</parameter>\n<parameter name=\"output_mode\">files_with_matches</parameter>\n</invoke>\n</function_calls>\n\n```\n✅ DISCOVERY VALIDATION CHECKPOINT:\n- [ ] Component research executed ✅/❌\n- [ ] Integration patterns confirmed ✅/❌\n- [ ] Analysis predictions verified ✅/❌\n- [ ] Discovery results documented ✅/❌\n\nPredicted: [analysis findings]\nActual: [discovery results]\nAccuracy: [confirmation/adjustment needed]\n```\n\n#### 🔴 **DO-RED (MANDATORY TEST CREATION):**\n\n🚫 BLOCKING REQUIREMENT - TESTS MUST BE CREATED:\n```go\n// MANDATORY: Plan-structured test creation with business requirement mapping\n// Framework: Ginkgo/Gomega BDD (REQUIRED)\nvar _ = Describe(\"BR-XXX-XXX: [Business Requirement Description]\", func() {\n    var (\n        component [ComponentType]  // Use existing interfaces from analysis\n        ctx       context.Context\n    )\n\n    BeforeEach(func() {\n        // Setup using existing patterns found in analysis\n        component = [existing_factory_pattern]()\n        ctx = context.Background()\n    })\n\n    It(\"should [specific business behavior from success criteria]\", func() {\n        // Test business outcomes, not technical implementation\n        result, err := component.[BusinessMethod](ctx, testData)\n        Expect(err).ToNot(HaveOccurred())\n        Expect(result.[BusinessOutcome]).To([BusinessMatcher])\n    })\n})\n```\n\n🚫 MANDATORY RED VALIDATION:\n<function_calls>\n<invoke name=\"Bash\">\n<parameter name=\"command\">go test ./path/to/test.go 2>&1 | grep \"FAIL\" || echo \"❌ Tests not failing\"</parameter>\n<parameter name=\"description\">Verify tests fail initially</parameter>\n</invoke>\n</function_calls>\n\n```\n✅ RED PHASE CHECKPOINT:\n- [ ] Tests created with business requirement mapping ✅/❌\n- [ ] Tests fail initially (RED confirmation) ✅/❌\n- [ ] Business outcomes tested, not implementation ✅/❌\n- [ ] Ginkgo/Gomega BDD framework used ✅/❌\n```\n\n#### 🟢 **DO-GREEN (MANDATORY IMPLEMENTATION + INTEGRATION):**\n\n🚫 BLOCKING REQUIREMENT - MUST IMPLEMENT AND INTEGRATE:\n```go\n// MANDATORY: Minimal implementation + main app integration\n// Enhance existing code (preferred) or create minimal new implementation\n\n// MANDATORY Integration in cmd/[application]/main.go:\nfunc main() {\n    // Add component to existing main application pattern\n    [existing_component] := [existing_factory](config)\n    [new_component] := [minimal_factory]([existing_dependencies])\n    \n    // Wire into existing service architecture\n    server.AddComponent([new_component])\n}\n```\n\n🚫 MANDATORY GREEN VALIDATION:\n<function_calls>\n<invoke name=\"Bash\">\n<parameter name=\"command\">go test ./... -timeout=10m</parameter>\n<parameter name=\"description\">Verify tests pass</parameter>\n</invoke>\n</function_calls>\n\n<function_calls>\n<invoke name=\"Grep\">\n<parameter name=\"pattern\">[ComponentName]</parameter>\n<parameter name=\"path\">cmd/</parameter>\n<parameter name=\"output_mode\">content</parameter>\n</invoke>\n</function_calls>\n\n```\n✅ GREEN PHASE CHECKPOINT:\n- [ ] Tests pass (GREEN confirmation) ✅/❌\n- [ ] Component integrated in main applications ✅/❌\n- [ ] Minimal implementation working ✅/❌\n- [ ] Integration verified with tool calls ✅/❌\n```\n\n#### 🔄 **DO-REFACTOR (MANDATORY ENHANCEMENT):**\n\n🚫 BLOCKING REQUIREMENT - ENHANCE EXISTING ONLY:\n```go\n// MANDATORY: Enhance existing implementation with sophisticated logic\n// NO new types/interfaces - enhance existing methods only\n\nfunc (c *[ExistingComponent]) [BusinessMethod](ctx context.Context, input [Type]) (*[ResultType], error) {\n    // Enhanced implementation with sophisticated business logic\n    // Preserve existing integration patterns\n    // Improve performance, maintainability, and business value\n    \n    return [enhanced_result], nil\n}\n```\n\n🚫 MANDATORY REFACTOR VALIDATION:\n<function_calls>\n<invoke name=\"Bash\">\n<parameter name=\"command\">git diff HEAD~1 | grep \"^+type.*struct\" && echo \"❌ New types forbidden\"</parameter>\n<parameter name=\"description\">Check no new types created</parameter>\n</invoke>\n</function_calls>\n\n<function_calls>\n<invoke name=\"Bash\">\n<parameter name=\"command\">golangci-lint run --timeout=5m</parameter>\n<parameter name=\"description\">Verify code quality</parameter>\n</invoke>\n</function_calls>\n\n```\n✅ REFACTOR PHASE CHECKPOINT:\n- [ ] No new types created (REFACTOR rule) ✅/❌\n- [ ] Integration preserved ✅/❌\n- [ ] Code quality improved ✅/❌\n- [ ] Sophisticated logic implemented ✅/❌\n```\n\n### 🚫 MANDATORY CONTINUOUS VALIDATION CHECKPOINTS:\n**REQUIRED throughout DO phase - AI must verify before proceeding:**\n\n**CHECKPOINT A: Type Reference Validation**\n- [ ] Type definitions read before field access ✅/❌\n- [ ] All referenced fields exist in structs ✅/❌\n\n**CHECKPOINT B: Function Signature Validation**\n- [ ] Function signatures confirmed before calling ✅/❌\n- [ ] Import statements verified before use ✅/❌\n\n**CHECKPOINT C: Business Integration Validation**\n- [ ] Main app integration confirmed ✅/❌\n- [ ] Component appears in cmd/ applications ✅/❌\n\n**CHECKPOINT D: Symbol Dependencies Validation**\n- [ ] Symbol dependencies analyzed ✅/❌\n- [ ] No undefined references ✅/❌\n\n❌ STOP: If ANY checkpoint fails, halt and resolve before proceeding\n\n---\n\n## ✅ PHASE 4: COMPREHENSIVE VALIDATION (10-15 minutes)\n**Purpose**: Exhaustive verification with mandatory tool execution\n\n### 🚫 MANDATORY BUSINESS VERIFICATION:\n\n🚫 BLOCKING REQUIREMENT - AI MUST EXECUTE:\n<function_calls>\n<invoke name=\"Grep\">\n<parameter name=\"pattern\">BR-XXX-XXX</parameter>\n<parameter name=\"path\">[implementation_files]</parameter>\n<parameter name=\"output_mode\">content</parameter>\n</invoke>\n</function_calls>\n\n<function_calls>\n<invoke name=\"Task\">\n<parameter name=\"subagent_type\">general-purpose</parameter>\n<parameter name=\"description\">Business outcome validation</parameter>\n<parameter name=\"prompt\">Validate that the implemented solution satisfies the business requirement [BR-XXX-XXX]. Provide evidence of business value delivery.</parameter>\n</invoke>\n</function_calls>\n\n```\n📊 MANDATORY BUSINESS VALIDATION MATRIX:\n- [ ] Business Requirement: [BR-XXX-XXX fully satisfied ✅/❌]\n- [ ] Business Value: [quantified outcomes delivered ✅/❌]\n- [ ] Success Criteria: [measurable goals achieved ✅/❌]\n- [ ] User Impact: [positive outcomes confirmed ✅/❌]\n```\n\n### 🚫 MANDATORY TECHNICAL VALIDATION:\n\n🚫 BLOCKING REQUIREMENT - AI MUST EXECUTE:\n<function_calls>\n<invoke name=\"Bash\">\n<parameter name=\"command\">go build ./...</parameter>\n<parameter name=\"description\">Build validation</parameter>\n</invoke>\n</function_calls>\n\n<function_calls>\n<invoke name=\"Bash\">\n<parameter name=\"command\">go test ./... -timeout=30m -cover</parameter>\n<parameter name=\"description\">Test execution and coverage</parameter>\n</invoke>\n</function_calls>\n\n<function_calls>\n<invoke name=\"Bash\">\n<parameter name=\"command\">golangci-lint run --timeout=10m</parameter>\n<parameter name=\"description\">Lint compliance</parameter>\n</invoke>\n</function_calls>\n\n```\n🔧 MANDATORY TECHNICAL VALIDATION MATRIX:\n- [ ] Build Status: [success ✅/failed ❌]\n- [ ] Test Coverage: [X% unit, Y% integration, Z% e2e]\n- [ ] Code Quality: [lint clean ✅/N issues ❌]\n- [ ] Integration: [confirmed in N applications ✅/❌]\n- [ ] Performance: [meets targets ✅/needs optimization ❌]\n```\n\n### 🚫 MANDATORY INTEGRATION CONFIRMATION:\n\n<function_calls>\n<invoke name=\"Grep\">\n<parameter name=\"pattern\">[ComponentName]</parameter>\n<parameter name=\"path\">cmd/</parameter>\n<parameter name=\"output_mode\">content</parameter>\n</invoke>\n</function_calls>\n\n### 📈 **MANDATORY CONFIDENCE ASSESSMENT:**\n```\n🎯 IRONCLAD CONFIDENCE ASSESSMENT:\n\n**Component Scores** (Evidence-Based):\n- Evidence-Based Analysis: [X%] (tool execution verified)\n- Business Validation: [Y%] (BR-XXX-XXX fulfillment confirmed)\n- Technical Implementation: [Z%] (all validations passed)\n- Integration Quality: [W%] (main app usage verified)\n- Code Quality: [V%] (build/test/lint confirmed)\n\n**Weighted Confidence Calculation**:\n- Analysis Quality (25%): [X% × 0.25 = A%]\n- Business Value (30%): [Y% × 0.30 = B%]\n- Technical Quality (20%): [Z% × 0.20 = C%]\n- Integration (15%): [W% × 0.15 = D%]\n- Code Quality (10%): [V% × 0.10 = E%]\n\n**OVERALL CONFIDENCE**: [A + B + C + D + E = TOTAL%]\n\n**TOOL EXECUTION COMPLIANCE**:\n- [ ] All required tool calls executed ✅/❌\n- [ ] Evidence collected and documented ✅/❌\n- [ ] Validation checkpoints passed ✅/❌\n- [ ] Rule compliance verified ✅/❌\n\n**DETAILED JUSTIFICATION**:\n[Comprehensive explanation including:\n- Evidence-based approach validation with tool execution proof\n- Business requirement alignment confirmation with specific evidence\n- Technical implementation quality assessment with test results\n- Integration success verification with grep confirmation\n- Risk mitigation effectiveness with validation results\n- Areas of strength and any remaining concerns]\n```\n\n🚫 **MANDATORY COMPLETION GATE:**\n- [ ] All tool calls executed successfully ✅/❌\n- [ ] Business verification completed ✅/❌\n- [ ] Technical validation passed ✅/❌\n- [ ] Integration confirmed ✅/❌\n- [ ] Confidence assessment ≥90% ✅/❌\n\n❌ Cannot claim completion without ALL checkboxes marked ✅\n\n---\n\n## 🏆 **IRONCLAD DEVELOPMENT WORKFLOW COMPLETE**\n\n```\n✅ COMPREHENSIVE IRONCLAD DEVELOPMENT CYCLE:\n\n**METHODOLOGY EXECUTED WITH TOOL ENFORCEMENT**:\n✅ Evidence-Based Analysis (mandatory tool execution verified)\n✅ Strategic Planning (comprehensive validation with user approval)\n✅ Systematic Implementation (TDD with enforced checkpoints)\n✅ Comprehensive Validation (tool-verified business + technical confirmation)\n\n**DELIVERABLES ACHIEVED WITH EVIDENCE**:\n✅ Business Requirement: [BR-XXX-XXX successfully implemented with proof]\n✅ Evidence-Based Solution: [existing code leveraged with documentation]\n✅ Quality Implementation: [systematic TDD with checkpoint verification]\n✅ Main App Integration: [confirmed in production applications with grep]\n✅ Confidence Assessment: [TOTAL% with detailed tool-based justification]\n\n**SUCCESS CRITERIA MET WITH VALIDATION**:\n✅ Business value delivered with measurable, verified outcomes\n✅ Technical quality meets standards with tool confirmation\n✅ Integration successfully completed and tool-verified\n✅ Methodology compliance maintained with checkpoint evidence\n✅ Evidence-based approach prevented unnecessary work with proof\n\n**IRONCLAD ADVANTAGES**:\n✅ Prevented hallucinations through mandatory tool execution\n✅ Ensured rule compliance through blocking checkpoints\n✅ Delivered verified quality through comprehensive validation\n✅ Maintained integration through enforced verification\n✅ Provided high-confidence assessment through evidence-based approach\n```\n\n## 🎯 **WHEN TO USE /develop-strict:**\n\n**✅ MANDATORY FOR:**\n- Complex/unclear requirements needing thorough analysis\n- Critical system components requiring high confidence\n- New team members learning methodology\n- Unfamiliar technical territory requiring validation\n- Components affecting multiple main applications\n- High-risk changes requiring comprehensive validation\n\n**❌ OVERKILL FOR:**\n- Simple, well-understood routine changes\n- Experienced developers on familiar components\n- Minor fixes with clear scope\n- Prototyping and experimentation\n\n**PHILOSOPHY**: Maximum quality assurance through systematic, tool-enforced, evidence-based development with comprehensive validation and blocking checkpoints.",
			"category": "development",
			"tags": [
				"development",
				"strict",
				"ironclad",
				"mandatory",
				"comprehensive",
				"evidence-based",
				"tool-enforced"
			]
		},
		{
			"name": "Build Error Fix",
			"trigger": "/fix-build",
			"description": "Streamlined build fixing with evidence-based analysis for routine error resolution",
			"command": "BUILD ERROR FIX - STREAMLINED EVIDENCE-BASED METHODOLOGY:\n\n## 🔍 ANALYSIS (5-10 min): Evidence-Based Error Context\n**Purpose**: Efficient error analysis with essential validation\n\n### STREAMLINED ANALYZE-FIRST PROTOCOL:\n\n#### 🔍 **ANALYZING BUILD ERRORS:**\n- What specific build errors are occurring?\n- Are these missing imports, undefined symbols, or signature mismatches?\n- What's the likely root cause?\n\n#### 📚 **CHECKING EXISTING SOLUTIONS:**\n```bash\n# Search for existing implementations\ngrep -r \"[undefined_symbol]\" . --include=\"*.go\" -n\n# Look for similar patterns\ngrep -r \"New[SymbolName]\\|Create[SymbolName]\" . --include=\"*.go\"\n```\n\n#### 💡 **EVIDENCE-BASED BUILD STRATEGY:**\n```\n📊 BUILD ERROR ANALYSIS:\n\n**ERROR ANALYSIS**:\n- Build Errors: [specific errors identified]\n- Root Cause: [missing import/implementation/signature issue]\n- Scope: [minimal/moderate/extensive]\n\n**EXISTING SOLUTIONS**:\n- Similar Implementations: [components found]\n- Reusable Code: [specific components available]\n\n**BUILD STRATEGY**:\n□ Fix imports/connections: [missing imports]\n□ Use existing implementation: [specific component]\n□ Create minimal implementation: [justified need]\n```\n\n**ESCALATION**: ⚠️ For complex/extensive errors, consider `/fix-build-strict`\n\n---\n\n## 📋 PLAN (5-10 min): Solution Strategy\n**Purpose**: Focused approach with essential validation\n\n- Strategy: Fix imports → Use existing → Create minimal (priority order)\n- **User Approval**: Simple approach approved? (YES/NO)\n\n---\n\n## ⚡ DO (Variable): Controlled Implementation\n**Purpose**: Systematic error resolution\n\n### Key Checkpoints:\n- **Type validation**: Verify struct fields exist before use\n- **Function validation**: Confirm signatures before calling\n- **Integration check**: Ensure main app usage maintained\n\n### Implementation Approach:\n1. **Fix imports first** (if applicable)\n2. **Use existing implementations** (preferred)\n3. **Create minimal code** (only if necessary)\n4. **Verify integration** (main app usage)\n\n---\n\n## ✅ CHECK (5 min): Build Validation\n**Purpose**: Essential verification\n\n### Technical Validation:\n```bash\n# Build validation\ngo build ./...\n# Test validation\ngo test ./... -timeout=10m\n# Integration check\ngrep -r \"[ComponentName]\" cmd/ --include=\"*.go\"\n```\n\n### Results:\n```\n🔧 BUILD VALIDATION:\n- Build Status: [success ✅/failed ❌]\n- Test Status: [passing ✅/failing ❌]\n- Integration: [confirmed ✅/missing ❌]\n\nConfidence: [X%] - [brief justification]\n```\n\n---\n\n## 🎯 **WHEN TO USE /fix-build:**\n\n**✅ RECOMMENDED FOR:**\n- Standard build errors with clear causes\n- Import issues and missing dependencies\n- Routine symbol resolution\n- Experienced developers familiar with codebase\n\n**❌ CONSIDER /fix-build-strict FOR:**\n- Complex dependency chains\n- Undefined symbols affecting multiple files\n- Uncertain error scope\n- Critical system components",
			"category": "debugging",
			"tags": [
				"build",
				"error",
				"streamlined",
				"routine",
				"quick-fix"
			]
		},
		{
			"name": "Strict Build Error Fix",
			"trigger": "/fix-build-strict",
			"description": "Ironclad build fixing with mandatory tool execution and comprehensive error analysis",
			"command": "STRICT BUILD ERROR FIX - IRONCLAD SYSTEMATIC METHODOLOGY:\n\n## 🚨 **IRONCLAD MODE ACTIVATED**\n**Purpose**: Maximum error resolution assurance with mandatory tool execution\n**Use for**: Complex errors, critical components, uncertain scope, comprehensive analysis needed\n\n## 🔍 ANALYSIS (10-15 min): Comprehensive Error Investigation\n**Purpose**: Complete error context with enforced tool validation\n\n### 🚫 MANDATORY BUILD ERROR PROTOCOL:\n\n#### 🔍 **COMPREHENSIVE ERROR ANALYSIS (MANDATORY):**\n- What specific build errors are occurring?\n- What assumptions am I making about the causes?\n- Are these errors symptoms of deeper architectural issues?\n- What is the complete dependency chain affected?\n\n#### 📚 **MANDATORY EXISTING SOLUTIONS DISCOVERY:**\n\n🚫 BLOCKING REQUIREMENT 1 - SYMBOL ANALYSIS:\n<function_calls>\n<invoke name=\"Grep\">\n<parameter name=\"pattern\">[EXACT_UNDEFINED_SYMBOL]</parameter>\n<parameter name=\"path\">.</parameter>\n<parameter name=\"output_mode\">content</parameter>\n<parameter name=\"-n\">true</parameter>\n</invoke>\n</function_calls>\n\n🚫 BLOCKING REQUIREMENT 2 - CONSTRUCTOR SEARCH:\n<function_calls>\n<invoke name=\"Grep\">\n<parameter name=\"pattern\">New[SYMBOL_NAME]|Create[SYMBOL_NAME]</parameter>\n<parameter name=\"path\">.</parameter>\n<parameter name=\"output_mode\">files_with_matches</parameter>\n</invoke>\n</function_calls>\n\n🚫 BLOCKING REQUIREMENT 3 - DEPENDENCY ANALYSIS:\n<function_calls>\n<invoke name=\"Task\">\n<parameter name=\"subagent_type\">general-purpose</parameter>\n<parameter name=\"description\">Comprehensive dependency analysis</parameter>\n<parameter name=\"prompt\">Analyze the complete dependency chain for [UNDEFINED_SYMBOL]. Find all files that reference this symbol, identify missing infrastructure, and determine the scope of implementation needed.</parameter>\n</invoke>\n</function_calls>\n\n🚫 BLOCKING REQUIREMENT 4 - IMPACT ASSESSMENT:\n<function_calls>\n<invoke name=\"Bash\">\n<parameter name=\"command\">go build [AFFECTED_FILE] 2>&1</parameter>\n<parameter name=\"description\">Test compilation impact</parameter>\n</invoke>\n</function_calls>\n\n❌ STOP: Cannot proceed until all tool calls executed and results analyzed\n\n#### 🎯 **MANDATORY ERROR CLASSIFICATION:**\n```\n🔍 COMPREHENSIVE BUILD ERROR CLASSIFICATION:\n\n**Error Analysis** (from tool execution):\n- Primary Error: [specific error from build output]\n- Symbol: [exact undefined symbol]\n- References Found: [N files from grep results]\n- Dependency Chain: [missing types/functions identified]\n- Scope Assessment: [MINIMAL|MODERATE|EXTENSIVE]\n\n**Impact Assessment** (from tool execution):\n- Affected Files: [specific files from grep]\n- Constructor Patterns: [existing patterns found]\n- Integration Points: [main app usage discovered]\n- Risk Level: [LOW|MEDIUM|HIGH based on scope]\n```\n\n#### 💡 **MANDATORY EVIDENCE-BASED ANALYSIS:**\n\n🚫 **REQUIRED REPORT FORMAT** (NO IMPLEMENTATION WITHOUT USER APPROVAL):\n```\n🚨 COMPREHENSIVE UNDEFINED SYMBOL ANALYSIS:\n\nSymbol: [undefined_symbol]\nReferences found: [N files with specific paths]\nDependent infrastructure: [list missing types/functions with details]\nScope: [minimal/medium/extensive with evidence]\nRisk Level: [assessment based on impact analysis]\n\n**EXISTING SOLUTIONS FOUND** (from tool execution):\n- Similar Implementations: [N components found with file paths]\n- Constructor Patterns: [New*/Create* patterns discovered]\n- Integration Examples: [main app usage patterns]\n- Reusable Infrastructure: [components that can be leveraged]\n\n**COMPREHENSIVE OPTIONS**:\nA) Implement complete infrastructure ([X] files affected, [Y] types needed)\n   - Effort: [HIGH|MEDIUM|LOW]\n   - Risk: [assessment]\n   - Timeline: [estimate]\n\nB) Create minimal stub ([Z] files affected, may break [W] dependent files)\n   - Effort: [HIGH|MEDIUM|LOW]\n   - Risk: [assessment]\n   - Trade-offs: [what functionality will be limited]\n\nC) Alternative approach: [evidence-based alternative with justification]\n   - Effort: [HIGH|MEDIUM|LOW]\n   - Risk: [assessment]\n   - Benefits: [why this might be better]\n\n🚫 MANDATORY USER DECISION REQUIRED: Which approach should I take? (A/B/C)\n```\n\n❌ STOP: NO implementation without explicit user approval after complete analysis\n\n🚫 **MANDATORY ANALYSIS COMPLETE GATE:**\n- [ ] Symbol analysis tool calls executed ✅/❌\n- [ ] Dependency chain mapped completely ✅/❌\n- [ ] Impact assessment performed ✅/❌\n- [ ] Options A/B/C presented to user ✅/❌\n- [ ] User decision received ✅/❌\n\n❌ STOP: Cannot proceed to implementation until user selects approach\n\n---\n\n## 📋 PLAN (10-15 min): Systematic Resolution Strategy\n**Purpose**: Detailed implementation plan based on user-approved approach\n\n### 🚫 MANDATORY PLANNING BASED ON USER SELECTION:\n\n**If User Selected Option A (Complete Infrastructure):**\n```\n📋 COMPREHENSIVE IMPLEMENTATION PLAN:\n- Components to create: [detailed list with types]\n- Integration points: [main app modifications needed]\n- Dependencies: [other packages affected]\n- Testing strategy: [how to validate each component]\n- Timeline: [realistic estimate with phases]\n```\n\n**If User Selected Option B (Minimal Stub):**\n```\n📋 MINIMAL IMPLEMENTATION PLAN:\n- Stub components: [basic types/functions needed]\n- Limitations: [functionality that won't work]\n- Future expansion: [how to enhance later]\n- Risk mitigation: [how to handle dependent failures]\n```\n\n**If User Selected Option C (Alternative):**\n```\n📋 ALTERNATIVE APPROACH PLAN:\n- Alternative solution: [specific approach details]\n- Implementation steps: [how to execute alternative]\n- Migration strategy: [if changing existing code]\n- Validation approach: [how to confirm success]\n```\n\n🚫 **MANDATORY USER APPROVAL FOR DETAILED PLAN:**\n```\n🎯 DETAILED IMPLEMENTATION PLAN SUMMARY:\nChosen Approach: [A/B/C as selected by user]\nImplementation Strategy: [specific steps planned]\nRisk Assessment: [identified risks and mitigation]\nTimeline: [realistic estimate]\nValidation: [how success will be measured]\n\n❓ **MANDATORY APPROVAL**: Do you approve this detailed implementation plan? (YES/NO)\n```\n\n❌ STOP: Cannot proceed to implementation without explicit \"YES\" approval\n\n---\n\n## ⚡ DO (Variable): Controlled Implementation with Mandatory Validation\n**Purpose**: Systematic error resolution following approved plan\n\n### 🚫 MANDATORY: User-Approved Plan Execution Only\n\n#### 🚫 **MANDATORY IMPLEMENTATION CHECKPOINTS:**\n\n**CHECKPOINT A: Type Reference Validation**\n🚫 BLOCKING REQUIREMENT - BEFORE ANY STRUCT FIELD ACCESS:\n<function_calls>\n<invoke name=\"Read\">\n<parameter name=\"file_path\">[TYPE_DEFINITION_FILE]</parameter>\n</invoke>\n</function_calls>\n\n```\n✅ TYPE VALIDATION CHECKPOINT:\n- [ ] Type definition file read ✅/❌\n- [ ] All referenced fields exist in struct ✅/❌\n- [ ] No empty struct{} definitions ✅/❌\n```\n\n**CHECKPOINT B: Function Signature Validation**\n🚫 BLOCKING REQUIREMENT - BEFORE ANY FUNCTION CALL:\n<function_calls>\n<invoke name=\"Grep\">\n<parameter name=\"pattern\">func.*[FUNCTION_NAME]</parameter>\n<parameter name=\"path\">[RELEVANT_PATH]</parameter>\n<parameter name=\"output_mode\">content</parameter>\n</invoke>\n</function_calls>\n\n```\n✅ FUNCTION VALIDATION CHECKPOINT:\n- [ ] Function signature confirmed ✅/❌\n- [ ] Import statements verified ✅/❌\n- [ ] Parameter types match ✅/❌\n```\n\n**CHECKPOINT C: Integration Validation**\n🚫 BLOCKING REQUIREMENT - MANDATORY MAIN APP INTEGRATION:\n<function_calls>\n<invoke name=\"Grep\">\n<parameter name=\"pattern\">[NEW_COMPONENT]</parameter>\n<parameter name=\"path\">cmd/</parameter>\n<parameter name=\"output_mode\">content</parameter>\n</invoke>\n</function_calls>\n\n```\n✅ INTEGRATION CHECKPOINT:\n- [ ] Component appears in main applications ✅/❌\n- [ ] Integration patterns followed ✅/❌\n- [ ] No orphaned business code ✅/❌\n```\n\n### 🚫 MANDATORY CONTINUOUS BUILD VALIDATION:\n\n**After Each Implementation Step:**\n<function_calls>\n<invoke name=\"Bash\">\n<parameter name=\"command\">go build ./...</parameter>\n<parameter name=\"description\">Incremental build validation</parameter>\n</invoke>\n</function_calls>\n\n<function_calls>\n<invoke name=\"Bash\">\n<parameter name=\"command\">go test ./... -timeout=10m</parameter>\n<parameter name=\"description\">Test impact validation</parameter>\n</invoke>\n</function_calls>\n\n```\n✅ INCREMENTAL VALIDATION:\n- [ ] Build status: [success ✅/failed ❌]\n- [ ] Test status: [passing ✅/failing ❌]\n- [ ] New errors introduced: [none ✅/some ❌]\n```\n\n❌ STOP: If ANY checkpoint fails, halt and resolve before proceeding\n\n---\n\n## ✅ CHECK (10-15 min): Comprehensive Build Validation\n**Purpose**: Exhaustive verification with mandatory tool execution\n\n### 🚫 MANDATORY COMPREHENSIVE VALIDATION:\n\n🚫 BLOCKING REQUIREMENT - FINAL BUILD VALIDATION:\n<function_calls>\n<invoke name=\"Bash\">\n<parameter name=\"command\">go build ./...</parameter>\n<parameter name=\"description\">Complete build validation</parameter>\n</invoke>\n</function_calls>\n\n<function_calls>\n<invoke name=\"Bash\">\n<parameter name=\"command\">go test ./... -timeout=30m -cover</parameter>\n<parameter name=\"description\">Comprehensive test validation</parameter>\n</invoke>\n</function_calls>\n\n<function_calls>\n<invoke name=\"Bash\">\n<parameter name=\"command\">golangci-lint run --timeout=10m</parameter>\n<parameter name=\"description\">Code quality validation</parameter>\n</invoke>\n</function_calls>\n\n<function_calls>\n<invoke name=\"Grep\">\n<parameter name=\"pattern\">[IMPLEMENTED_COMPONENTS]</parameter>\n<parameter name=\"path\">cmd/</parameter>\n<parameter name=\"output_mode\">content</parameter>\n</invoke>\n</function_calls>\n\n### 🚫 **MANDATORY VALIDATION MATRIX:**\n```\n🔧 COMPREHENSIVE BUILD VALIDATION RESULTS:\n\n**Build Validation** (tool-verified):\n- [ ] Build Status: [success ✅/failed ❌]\n- [ ] All original errors resolved: [confirmed ✅/remaining ❌]\n- [ ] No new errors introduced: [confirmed ✅/new issues ❌]\n\n**Test Validation** (tool-verified):\n- [ ] Test Status: [all passing ✅/some failing ❌]\n- [ ] Coverage maintained: [X% coverage ✅/decreased ❌]\n- [ ] No test regressions: [confirmed ✅/regressions ❌]\n\n**Quality Validation** (tool-verified):\n- [ ] Lint Status: [clean ✅/issues found ❌]\n- [ ] Code quality maintained: [confirmed ✅/degraded ❌]\n\n**Integration Validation** (tool-verified):\n- [ ] Main app integration: [confirmed ✅/missing ❌]\n- [ ] Component usage verified: [in N applications ✅/orphaned ❌]\n- [ ] Integration patterns followed: [confirmed ✅/violated ❌]\n\n**Rule Compliance Validation**:\n- [ ] AI behavioral constraints followed: [confirmed ✅/violated ❌]\n- [ ] Tool execution requirements met: [all executed ✅/missed some ❌]\n- [ ] Approval process followed: [confirmed ✅/bypassed ❌]\n```\n\n### 📈 **MANDATORY CONFIDENCE ASSESSMENT:**\n```\n🎯 IRONCLAD BUILD FIX CONFIDENCE ASSESSMENT:\n\n**Validation Scores** (Tool-Verified):\n- Error Resolution: [X%] (original errors fixed, no new ones)\n- Build Quality: [Y%] (build/test/lint all passing)\n- Integration Quality: [Z%] (main app usage confirmed)\n- Rule Compliance: [W%] (all requirements followed)\n- Tool Execution: [V%] (all mandatory tools used)\n\n**Weighted Confidence Calculation**:\n- Error Resolution (40%): [X% × 0.40 = A%]\n- Build Quality (25%): [Y% × 0.25 = B%]\n- Integration (20%): [Z% × 0.20 = C%]\n- Rule Compliance (10%): [W% × 0.10 = D%]\n- Tool Execution (5%): [V% × 0.05 = E%]\n\n**OVERALL CONFIDENCE**: [A + B + C + D + E = TOTAL%]\n\n**TOOL EXECUTION COMPLIANCE**:\n- [ ] All required symbol analysis executed ✅/❌\n- [ ] Complete dependency mapping performed ✅/❌\n- [ ] User approval obtained for approach ✅/❌\n- [ ] Mandatory checkpoints validated ✅/❌\n- [ ] Final validation tools executed ✅/❌\n\n**DETAILED JUSTIFICATION**:\n[Comprehensive explanation including:\n- Original error analysis with tool execution evidence\n- User-approved approach implementation confirmation\n- Build/test/lint validation results with tool output\n- Integration verification with grep confirmation\n- Rule compliance demonstration with checkpoint evidence\n- Any remaining risks or concerns identified]\n```\n\n🚫 **MANDATORY COMPLETION GATE:**\n- [ ] All original build errors resolved ✅/❌\n- [ ] No new errors introduced ✅/❌\n- [ ] All validation tools executed successfully ✅/❌\n- [ ] Integration confirmed in main applications ✅/❌\n- [ ] Confidence assessment ≥90% ✅/❌\n\n❌ Cannot claim completion without ALL checkboxes marked ✅\n\n---\n\n## 🏆 **IRONCLAD BUILD FIX COMPLETE**\n\n```\n✅ COMPREHENSIVE IRONCLAD BUILD ERROR RESOLUTION:\n\n**METHODOLOGY EXECUTED WITH TOOL ENFORCEMENT**:\n✅ Comprehensive Error Analysis (mandatory tool execution verified)\n✅ User-Approved Implementation Plan (explicit approval obtained)\n✅ Systematic Resolution (checkpoint-validated implementation)\n✅ Exhaustive Validation (tool-verified build/test/lint/integration)\n\n**DELIVERABLES ACHIEVED WITH EVIDENCE**:\n✅ Build Errors Resolved: [original errors fixed with tool confirmation]\n✅ Quality Maintained: [build/test/lint all passing with evidence]\n✅ Integration Preserved: [main app usage confirmed with grep]\n✅ Rule Compliance: [all mandatory checkpoints validated]\n✅ High Confidence: [TOTAL% with detailed tool-based justification]\n\n**SUCCESS CRITERIA MET WITH VALIDATION**:\n✅ Original build errors completely resolved\n✅ No new errors introduced (verified with incremental builds)\n✅ Code quality maintained or improved (lint/test confirmation)\n✅ Integration patterns preserved (main app usage verified)\n✅ Methodology compliance maintained (checkpoint evidence)\n\n**IRONCLAD BUILD FIX ADVANTAGES**:\n✅ Prevented incomplete fixes through comprehensive analysis\n✅ Ensured correct approach through user approval process\n✅ Maintained quality through mandatory validation checkpoints\n✅ Preserved integration through enforced verification\n✅ Provided high-confidence resolution through evidence-based validation\n```\n\n## 🎯 **WHEN TO USE /fix-build-strict:**\n\n**✅ MANDATORY FOR:**\n- Complex undefined symbol errors affecting multiple files\n- Build errors with uncertain scope or dependency chains\n- Critical system components requiring high confidence\n- Errors that might indicate architectural issues\n- New team members learning error resolution\n- Build failures in production or deployment pipelines\n\n**❌ OVERKILL FOR:**\n- Simple import errors with obvious solutions\n- Single-file build issues with clear causes\n- Routine dependency updates\n- Well-understood error patterns\n\n**PHILOSOPHY**: Maximum error resolution assurance through systematic, tool-enforced analysis with comprehensive validation and user-approved implementation.",
			"category": "debugging",
			"tags": [
				"build",
				"error",
				"strict",
				"ironclad",
				"comprehensive",
				"mandatory",
				"tool-enforced"
			]
		},
		{
			"name": "Code Refactoring",
			"trigger": "/refactor",
			"description": "Streamlined code refactoring with evidence-based pattern analysis for routine improvements",
			"command": "CODE REFACTORING - STREAMLINED EVIDENCE-BASED ENHANCEMENT:\n\n## 🔍 ANALYSIS (10-15 min): Evidence-Based Impact Assessment\n**Purpose**: Efficient refactoring analysis with essential pattern discovery\n\n### STREAMLINED REFACTOR-FOCUSED PROTOCOL:\n\n#### 🔍 **ANALYZING REFACTORING NEED:**\n- What specific code quality issues are being addressed?\n- What is the expected business value from this improvement?\n- Is this addressing technical debt or enhancing functionality?\n\n#### 📚 **CHECKING EXISTING PATTERNS:**\n```bash\n# Search for better implementation patterns\ngrep -r \"[ComponentName]\" cmd/ pkg/ test/ --include=\"*.go\"\n# Look for similar functionality with better quality\ngrep -r \"[SimilarFunctionality]\" pkg/ --include=\"*.go\"\n```\n\n#### 💡 **EVIDENCE-BASED REFACTORING STRATEGY:**\n```\n📊 REFACTORING ANALYSIS:\n\n**REFACTORING NEED**:\n- Quality Issues: [specific problems identified]\n- Technical Debt: [debt being addressed]\n- Business Value: [expected improvements]\n\n**EXISTING PATTERNS**:\n- Better Implementations: [superior patterns found]\n- Quality Standards: [established patterns identified]\n\n**REFACTORING STRATEGY**:\n□ Adopt existing pattern: [specific pattern to implement]\n□ Enhance current code: [improvements based on patterns]\n□ Restructure with proven approach: [established pattern]\n```\n\n**ESCALATION**: ⚠️ For complex refactoring or architectural changes, consider `/refactor-strict`\n\n---\n\n## 📋 PLAN (15-20 min): Enhancement Strategy\n**Purpose**: Focused refactoring plan with essential validation\n\n- Plan structural improvements based on discovered patterns\n- Focus on enhancing existing code rather than creating new\n- **User Approval**: Refactoring approach approved? (YES/NO)\n\n---\n\n## ⚡ DO (Variable): Controlled Enhancement\n**Purpose**: Systematic improvement with preserved functionality\n\n### Key Refactoring Checkpoints:\n- **Scope validation**: Stay within planned refactoring boundaries\n- **Functionality preservation**: Maintain existing behavior\n- **Integration preservation**: Keep main app usage intact\n- **Quality improvement**: Enhance code quality metrics\n\n### Implementation Approach:\n1. **Capture baseline state** (tests, integration)\n2. **Apply pattern-based improvements** (enhance existing code)\n3. **Preserve integration points** (maintain main app usage)\n4. **Validate improvements** (quality metrics, performance)\n\n---\n\n## ✅ CHECK (10 min): Quality Verification\n**Purpose**: Essential refactoring validation\n\n### Quality Validation:\n```bash\n# Build and test validation\ngo build ./...\ngo test ./... -timeout=30m -cover\n# Quality improvement check\ngolangci-lint run --timeout=10m\n# Integration preservation\ngrep -r \"[ComponentName]\" cmd/ --include=\"*.go\"\n```\n\n### Results:\n```\n🔧 REFACTORING VALIDATION:\n- Build Status: [success ✅/failed ❌]\n- Test Coverage: [maintained/improved ✅/decreased ❌]\n- Code Quality: [improved ✅/unchanged/degraded ❌]\n- Integration: [preserved ✅/broken ❌]\n\nConfidence: [X%] - [brief improvement justification]\n```\n\n---\n\n## 🎯 **WHEN TO USE /refactor:**\n\n**✅ RECOMMENDED FOR:**\n- Routine code quality improvements\n- Pattern-based enhancements with clear examples\n- Performance optimizations\n- Technical debt reduction with known solutions\n- Experienced developers on familiar code\n\n**❌ CONSIDER /refactor-strict FOR:**\n- Architectural changes affecting multiple components\n- Refactoring with unclear impact or scope\n- Critical system components\n- Complex pattern migrations",
			"category": "refactoring",
			"tags": [
				"refactor",
				"streamlined",
				"enhancement",
				"pattern-based",
				"routine"
			]
		},
		{
			"name": "Strict Code Refactoring",
			"trigger": "/refactor-strict",
			"description": "Ironclad code refactoring with mandatory pattern analysis and comprehensive preservation validation",
			"command": "STRICT CODE REFACTORING - IRONCLAD SYSTEMATIC ENHANCEMENT:\n\n## 🚨 **IRONCLAD MODE ACTIVATED**\n**Purpose**: Maximum refactoring assurance with mandatory pattern analysis and comprehensive validation\n**Use for**: Architectural changes, critical components, complex refactoring, uncertain impact scope\n\n## 🔍 ANALYSIS (15-25 min): Comprehensive Impact Assessment\n**Purpose**: Complete refactoring analysis with enforced pattern discovery\n\n### 🚫 MANDATORY REFACTORING ANALYSIS PROTOCOL:\n\n#### 🔍 **COMPREHENSIVE REFACTORING NEED ANALYSIS (MANDATORY):**\n- What specific code quality issues are being addressed?\n- What assumptions am I making about the refactoring scope?\n- Is this refactoring addressing technical debt or business requirements?\n- What is the expected business value from this improvement?\n- What is the complete impact scope across the system?\n\n#### 📚 **MANDATORY EXISTING PATTERN DISCOVERY:**\n\n🚫 BLOCKING REQUIREMENT 1 - COMPONENT ANALYSIS:\n<function_calls>\n<invoke name=\"Grep\">\n<parameter name=\"pattern\">[TARGET_COMPONENT]</parameter>\n<parameter name=\"path\">cmd/</parameter>\n<parameter name=\"output_mode\">content</parameter>\n<parameter name=\"-n\">true</parameter>\n</invoke>\n</function_calls>\n\n<function_calls>\n<invoke name=\"Grep\">\n<parameter name=\"pattern\">[TARGET_COMPONENT]</parameter>\n<parameter name=\"path\">pkg/</parameter>\n<parameter name=\"output_mode\">content</parameter>\n<parameter name=\"-n\">true</parameter>\n</invoke>\n</function_calls>\n\n🚫 BLOCKING REQUIREMENT 2 - PATTERN DISCOVERY:\n<function_calls>\n<invoke name=\"Task\">\n<parameter name=\"subagent_type\">general-purpose</parameter>\n<parameter name=\"description\">Superior pattern discovery</parameter>\n<parameter name=\"prompt\">Search pkg/ for implementations similar to [TARGET_COMPONENT]. Find the highest quality implementation patterns that could be adopted instead of refactoring. Focus on architectural patterns, error handling, and integration approaches.</parameter>\n</invoke>\n</function_calls>\n\n🚫 BLOCKING REQUIREMENT 3 - DEPENDENCY IMPACT:\n<function_calls>\n<invoke name=\"Bash\">\n<parameter name=\"command\">go mod graph | grep [TARGET_PACKAGE]</parameter>\n<parameter name=\"description\">Analyze dependency impact</parameter>\n</invoke>\n</function_calls>\n\n🚫 BLOCKING REQUIREMENT 4 - BASELINE CAPTURE:\n<function_calls>\n<invoke name=\"Bash\">\n<parameter name=\"command\">go test ./... -timeout=30m -cover</parameter>\n<parameter name=\"description\">Capture baseline test and coverage state</parameter>\n</invoke>\n</function_calls>\n\n❌ STOP: Cannot proceed until all tool calls executed and patterns analyzed\n\n#### 🎯 **MANDATORY REFACTORING DECISION MATRIX:**\n```\n🔍 COMPREHENSIVE PATTERN ANALYSIS RESULTS:\n\n**Current State Analysis** (from tool execution):\n- Component Usage: [N files in cmd/, M files in pkg/]\n- Integration Points: [specific main app usage patterns]\n- Dependencies: [packages affected by potential changes]\n- Test Coverage: [current X% coverage baseline]\n- Quality Metrics: [current lint/complexity/maintainability]\n\n**Superior Patterns Found** (from tool execution):\n- Better Implementations: [N superior patterns found with file paths]\n- Architectural Examples: [established approaches with specifics]\n- Quality Standards: [patterns that exceed current quality]\n- Integration Patterns: [proven main app integration approaches]\n\n**Refactoring Impact Assessment**:\n- Scope: [MINIMAL|MODERATE|EXTENSIVE based on analysis]\n- Risk Level: [LOW|MEDIUM|HIGH based on dependency analysis]\n- Effort Required: [estimation based on pattern complexity]\n- Business Value: [quantified improvement potential]\n```\n\n#### 💡 **MANDATORY REFACTORING STRATEGY DECISION:**\n\n🚫 **ADOPTION vs REFACTOR DECISION MATRIX**:\n```\n🎯 PATTERN ADOPTION vs REFACTORING ANALYSIS:\n\n**OPTION A: ADOPT EXISTING SUPERIOR PATTERN**\n- Superior Pattern Found: [specific pattern with file path]\n- Adoption Effort: [HIGH|MEDIUM|LOW]\n- Risk Level: [assessment]\n- Benefits: [specific improvements vs current code]\n- Implementation: [how to adopt the superior pattern]\n\n**OPTION B: REFACTOR CURRENT IMPLEMENTATION**\n- Refactoring Scope: [specific improvements planned]\n- Pattern Basis: [which discovered patterns to follow]\n- Risk Level: [assessment]\n- Preservation Requirements: [functionality to maintain]\n- Implementation: [step-by-step refactoring plan]\n\n**OPTION C: HYBRID APPROACH**\n- Combination Strategy: [adopt some patterns, refactor others]\n- Phased Implementation: [step-by-step approach]\n- Risk Mitigation: [how to minimize disruption]\n- Validation Points: [checkpoints throughout process]\n\n🚫 MANDATORY USER DECISION REQUIRED: Which approach should I take? (A/B/C)\n```\n\n❌ STOP: NO refactoring without explicit user approval after complete analysis\n\n🚫 **MANDATORY ANALYSIS COMPLETE GATE:**\n- [ ] Component usage analysis executed ✅/❌\n- [ ] Superior patterns discovered and documented ✅/❌\n- [ ] Dependency impact assessed ✅/❌\n- [ ] Baseline state captured ✅/❌\n- [ ] Options A/B/C presented to user ✅/❌\n- [ ] User decision received ✅/❌\n\n❌ STOP: Cannot proceed to planning until user selects approach\n\n---\n\n## 📋 PLAN (20-30 min): Comprehensive Enhancement Strategy\n**Purpose**: Detailed refactoring plan based on user-approved approach\n\n### 🚫 MANDATORY PLANNING BASED ON USER SELECTION:\n\n**If User Selected Option A (Adopt Superior Pattern):**\n```\n📋 PATTERN ADOPTION IMPLEMENTATION PLAN:\n- Target Pattern: [specific pattern with file location]\n- Adoption Steps: [detailed migration from current to superior pattern]\n- Integration Modifications: [main app changes needed]\n- Validation Strategy: [how to confirm successful adoption]\n- Rollback Plan: [how to revert if adoption fails]\n- Timeline: [realistic estimate for adoption]\n```\n\n**If User Selected Option B (Refactor Current):**\n```\n📋 REFACTORING IMPLEMENTATION PLAN:\n- Refactoring Scope: [specific code areas to improve]\n- Pattern Guidelines: [discovered patterns to follow]\n- Preservation Requirements: [functionality/integration to maintain]\n- Quality Targets: [specific improvements to achieve]\n- Validation Checkpoints: [how to verify each improvement]\n- Risk Mitigation: [how to handle potential issues]\n```\n\n**If User Selected Option C (Hybrid Approach):**\n```\n📋 HYBRID IMPLEMENTATION PLAN:\n- Phase 1: [pattern adoption components]\n- Phase 2: [refactoring components]\n- Phase 3: [integration and validation]\n- Coordination Strategy: [how phases work together]\n- Validation Points: [checkpoints between phases]\n- Contingency Plans: [alternatives if phases conflict]\n```\n\n### 🚫 **MANDATORY PRESERVATION PROTOCOL:**\n\n🚫 BLOCKING REQUIREMENT - PRE-REFACTOR STATE CAPTURE:\n<function_calls>\n<invoke name=\"Bash\">\n<parameter name=\"command\">git status --porcelain</parameter>\n<parameter name=\"description\">Verify clean working state</parameter>\n</invoke>\n</function_calls>\n\n<function_calls>\n<invoke name=\"Bash\">\n<parameter name=\"command\">git rev-parse HEAD</parameter>\n<parameter name=\"description\">Capture current commit for rollback</parameter>\n</invoke>\n</function_calls>\n\n<function_calls>\n<invoke name=\"Grep\">\n<parameter name=\"pattern\">[TARGET_COMPONENT]</parameter>\n<parameter name=\"path\">cmd/</parameter>\n<parameter name=\"output_mode\">content</parameter>\n</invoke>\n</function_calls>\n\n```\n🛡️ PRESERVATION SAFETY PROTOCOL:\n- [ ] Clean working state verified ✅/❌\n- [ ] Current commit captured for rollback ✅/❌\n- [ ] Baseline integration patterns documented ✅/❌\n- [ ] Baseline test coverage recorded ✅/❌\n```\n\n🚫 **MANDATORY USER APPROVAL FOR DETAILED PLAN:**\n```\n🎯 COMPREHENSIVE REFACTORING PLAN SUMMARY:\nChosen Approach: [A/B/C as selected by user]\nImplementation Strategy: [detailed steps planned]\nPreservation Requirements: [functionality/integration to maintain]\nQuality Targets: [specific improvements expected]\nRisk Assessment: [identified risks and mitigation strategies]\nValidation Strategy: [how success will be measured]\nRollback Plan: [recovery procedure if needed]\nTimeline: [realistic estimate with checkpoints]\n\n❓ **MANDATORY APPROVAL**: Do you approve this comprehensive refactoring plan? (YES/NO)\n```\n\n❌ STOP: Cannot proceed to implementation without explicit \"YES\" approval\n\n---\n\n## ⚡ DO (Variable): Controlled Enhancement with Mandatory Validation\n**Purpose**: Systematic refactoring execution with enforced preservation\n\n### 🚫 MANDATORY: User-Approved Plan Execution Only\n\n#### 🚫 **MANDATORY REFACTORING CHECKPOINTS:**\n\n**CHECKPOINT R1: Refactoring Scope Validation**\n🚫 BLOCKING REQUIREMENT - BEFORE ANY CODE CHANGES:\n```\n✅ SCOPE VALIDATION CHECKPOINT:\n- [ ] Changes align with approved plan ✅/❌\n- [ ] Scope remains within approved boundaries ✅/❌\n- [ ] No scope creep beyond user approval ✅/❌\n- [ ] Pattern adoption follows discovered examples ✅/❌\n```\n\n**CHECKPOINT R2: Dependency Cascade Validation**\n🚫 BLOCKING REQUIREMENT - AFTER EACH MAJOR CHANGE:\n<function_calls>\n<invoke name=\"Bash\">\n<parameter name=\"command\">go build ./...</parameter>\n<parameter name=\"description\">Validate no cascade build failures</parameter>\n</invoke>\n</function_calls>\n\n<function_calls>\n<invoke name=\"Bash\">\n<parameter name=\"command\">go test ./... -timeout=10m</parameter>\n<parameter name=\"description\">Validate no cascade test failures</parameter>\n</invoke>\n</function_calls>\n\n```\n✅ DEPENDENCY CASCADE CHECKPOINT:\n- [ ] Build status maintained ✅/❌\n- [ ] Test status maintained ✅/❌\n- [ ] No new failures introduced ✅/❌\n- [ ] Dependency chain intact ✅/❌\n```\n\n**CHECKPOINT R3: Test Coverage + Strategy Preservation**\n🚫 BLOCKING REQUIREMENT - CONTINUOUS COVERAGE MONITORING:\n<function_calls>\n<invoke name=\"Bash\">\n<parameter name=\"command\">go test ./... -timeout=30m -cover</parameter>\n<parameter name=\"description\">Monitor coverage throughout refactoring</parameter>\n</invoke>\n</function_calls>\n\n```\n✅ COVERAGE PRESERVATION CHECKPOINT:\n- [ ] Test coverage maintained or improved ✅/❌\n- [ ] No test regressions introduced ✅/❌\n- [ ] Testing strategy patterns preserved ✅/❌\n- [ ] Business logic validation maintained ✅/❌\n```\n\n**CHECKPOINT R4: Business Integration Preservation**\n🚫 BLOCKING REQUIREMENT - INTEGRATION VERIFICATION:\n<function_calls>\n<invoke name=\"Grep\">\n<parameter name=\"pattern\">[REFACTORED_COMPONENT]</parameter>\n<parameter name=\"path\">cmd/</parameter>\n<parameter name=\"output_mode\">content</parameter>\n</invoke>\n</function_calls>\n\n```\n✅ INTEGRATION PRESERVATION CHECKPOINT:\n- [ ] Main app integration patterns preserved ✅/❌\n- [ ] Component usage maintained in cmd/ ✅/❌\n- [ ] Integration interfaces unchanged ✅/❌\n- [ ] Business functionality preserved ✅/❌\n```\n\n❌ STOP: If ANY checkpoint fails, halt and resolve before proceeding\n\n### 🚫 MANDATORY INCREMENTAL VALIDATION:\n\n**After Each Refactoring Step:**\n```\n✅ INCREMENTAL VALIDATION CHECKLIST:\n- [ ] Functionality preserved ✅/❌\n- [ ] Integration maintained ✅/❌\n- [ ] Quality improved or maintained ✅/❌\n- [ ] No new issues introduced ✅/❌\n- [ ] Plan adherence confirmed ✅/❌\n```\n\n---\n\n## ✅ CHECK (15-20 min): Comprehensive Quality Verification\n**Purpose**: Exhaustive refactoring validation with mandatory tool execution\n\n### 🚫 MANDATORY COMPREHENSIVE VALIDATION:\n\n🚫 BLOCKING REQUIREMENT - COMPLETE QUALITY VALIDATION:\n<function_calls>\n<invoke name=\"Bash\">\n<parameter name=\"command\">go build ./...</parameter>\n<parameter name=\"description\">Final build validation</parameter>\n</invoke>\n</function_calls>\n\n<function_calls>\n<invoke name=\"Bash\">\n<parameter name=\"command\">go test ./... -timeout=30m -cover</parameter>\n<parameter name=\"description\">Comprehensive test and coverage validation</parameter>\n</invoke>\n</function_calls>\n\n<function_calls>\n<invoke name=\"Bash\">\n<parameter name=\"command\">golangci-lint run --timeout=10m</parameter>\n<parameter name=\"description\">Code quality improvement validation</parameter>\n</invoke>\n</function_calls>\n\n<function_calls>\n<invoke name=\"Grep\">\n<parameter name=\"pattern\">[REFACTORED_COMPONENTS]</parameter>\n<parameter name=\"path\">cmd/</parameter>\n<parameter name=\"output_mode\">content</parameter>\n</invoke>\n</function_calls>\n\n### 🚫 **MANDATORY QUALITY IMPROVEMENT MATRIX:**\n```\n🔧 COMPREHENSIVE REFACTORING VALIDATION RESULTS:\n\n**Build Validation** (tool-verified):\n- [ ] Build Status: [success ✅/failed ❌]\n- [ ] No build regressions: [confirmed ✅/issues found ❌]\n- [ ] All components compile: [confirmed ✅/failures ❌]\n\n**Test Validation** (tool-verified):\n- [ ] Test Status: [all passing ✅/some failing ❌]\n- [ ] Coverage: [maintained/improved X% ✅/decreased ❌]\n- [ ] No test regressions: [confirmed ✅/regressions found ❌]\n- [ ] Business logic preserved: [confirmed ✅/broken ❌]\n\n**Quality Validation** (tool-verified):\n- [ ] Lint Status: [improved/maintained ✅/degraded ❌]\n- [ ] Code complexity: [improved/maintained ✅/increased ❌]\n- [ ] Maintainability: [improved ✅/unchanged/degraded ❌]\n- [ ] Performance: [improved/maintained ✅/degraded ❌]\n\n**Integration Validation** (tool-verified):\n- [ ] Main app integration: [preserved ✅/broken ❌]\n- [ ] Component usage: [maintained in N applications ✅/lost ❌]\n- [ ] Interface compatibility: [preserved ✅/breaking changes ❌]\n- [ ] Business functionality: [preserved ✅/changed ❌]\n\n**Pattern Adoption Validation** (if applicable):\n- [ ] Superior patterns implemented: [confirmed ✅/partial ❌]\n- [ ] Pattern consistency: [achieved ✅/inconsistent ❌]\n- [ ] Architectural alignment: [improved ✅/unchanged ❌]\n```\n\n### 📈 **MANDATORY REFACTORING CONFIDENCE ASSESSMENT:**\n```\n🎯 IRONCLAD REFACTORING CONFIDENCE ASSESSMENT:\n\n**Quality Improvement Scores** (Tool-Verified):\n- Pattern Quality: [X%] (superior patterns adopted/quality improved)\n- Code Quality: [Y%] (lint/complexity/maintainability metrics)\n- Test Quality: [Z%] (coverage maintained/improved, no regressions)\n- Integration Quality: [W%] (main app usage preserved)\n- Preservation Quality: [V%] (functionality/behavior maintained)\n\n**Weighted Confidence Calculation**:\n- Pattern/Quality Improvement (30%): [X% × 0.30 = A%]\n- Code Quality Metrics (25%): [Y% × 0.25 = B%]\n- Test Preservation (20%): [Z% × 0.20 = C%]\n- Integration Preservation (15%): [W% × 0.15 = D%]\n- Functionality Preservation (10%): [V% × 0.10 = E%]\n\n**OVERALL CONFIDENCE**: [A + B + C + D + E = TOTAL%]\n\n**REFACTORING COMPLIANCE VERIFICATION**:\n- [ ] All required pattern analysis executed ✅/❌\n- [ ] User-approved approach implemented exactly ✅/❌\n- [ ] All preservation checkpoints validated ✅/❌\n- [ ] Quality improvement targets achieved ✅/❌\n- [ ] No functionality regressions introduced ✅/❌\n\n**DETAILED JUSTIFICATION**:\n[Comprehensive explanation including:\n- Pattern adoption/refactoring approach implementation confirmation\n- Quality improvement evidence with before/after metrics\n- Preservation validation results with tool execution proof\n- Integration maintenance verification with grep confirmation\n- Risk mitigation effectiveness with checkpoint evidence\n- Specific improvements achieved and any remaining concerns]\n```\n\n🚫 **MANDATORY COMPLETION GATE:**\n- [ ] All quality improvements achieved ✅/❌\n- [ ] No functionality or integration regressions ✅/❌\n- [ ] All validation tools executed successfully ✅/❌\n- [ ] Pattern adoption/refactoring completed as approved ✅/❌\n- [ ] Confidence assessment ≥85% ✅/❌\n\n❌ Cannot claim completion without ALL checkboxes marked ✅\n\n---\n\n## 🏆 **IRONCLAD REFACTORING COMPLETE**\n\n```\n✅ COMPREHENSIVE IRONCLAD CODE REFACTORING:\n\n**METHODOLOGY EXECUTED WITH TOOL ENFORCEMENT**:\n✅ Comprehensive Pattern Analysis (mandatory tool execution verified)\n✅ User-Approved Enhancement Strategy (explicit approval obtained)\n✅ Systematic Quality Improvement (checkpoint-validated refactoring)\n✅ Exhaustive Preservation Validation (tool-verified functionality/integration)\n\n**DELIVERABLES ACHIEVED WITH EVIDENCE**:\n✅ Quality Improvements: [specific enhancements with tool confirmation]\n✅ Pattern Adoption: [superior patterns implemented with evidence]\n✅ Functionality Preserved: [business logic maintained with test confirmation]\n✅ Integration Maintained: [main app usage preserved with grep verification]\n✅ High Confidence: [TOTAL% with detailed tool-based justification]\n\n**SUCCESS CRITERIA MET WITH VALIDATION**:\n✅ Code quality improved with measurable metrics\n✅ Functionality completely preserved (no regressions)\n✅ Integration patterns maintained (main app usage intact)\n✅ Superior patterns adopted where applicable\n✅ Methodology compliance maintained (checkpoint evidence)\n\n**IRONCLAD REFACTORING ADVANTAGES**:\n✅ Prevented quality degradation through comprehensive analysis\n✅ Ensured correct approach through pattern discovery and user approval\n✅ Maintained functionality through mandatory preservation checkpoints\n✅ Preserved integration through enforced verification\n✅ Delivered verified improvements through evidence-based validation\n```\n\n## 🎯 **WHEN TO USE /refactor-strict:**\n\n**✅ MANDATORY FOR:**\n- Architectural changes affecting multiple components\n- Refactoring critical system components\n- Complex pattern migrations with uncertain impact\n- Large-scale code quality improvements\n- Refactoring affecting main application integration\n- Team learning comprehensive refactoring methodology\n\n**❌ OVERKILL FOR:**\n- Simple code style improvements\n- Single-function optimizations\n- Well-understood pattern applications\n- Minor performance tweaks\n\n**PHILOSOPHY**: Maximum refactoring assurance through systematic, tool-enforced pattern analysis with comprehensive preservation validation and evidence-based quality improvement.",
			"category": "refactoring",
			"tags": [
				"refactor",
				"strict",
				"ironclad",
				"comprehensive",
				"pattern-analysis",
				"preservation",
				"tool-enforced"
			]
		}
	],
	"instructions": {
		"setup": "To use these shortcuts in Cursor:",
		"steps": [
			"1. Copy the command text from any shortcut above",
			"2. Open Cursor Settings (Cmd/Ctrl + ,)",
			"3. Go to 'Composer' or 'Custom Instructions' section",
			"4. Add new instruction with the trigger and command text",
			"5. Use the trigger (e.g., /develop, /fix-build, /refactor) in chat to activate"
		],
		"alternative": "Or simply copy-paste the command text directly into chat when needed",
		"auto_escalation": {
			"description": "Automatic escalation to strict mode based on complexity indicators",
			"triggers": {
				"complex_requirements": "Unknown/undefined symbols → /develop-strict, /fix-build-strict",
				"new_business_requirements": "BR-XXX-XXX needs definition → /develop-strict",
				"large_scope_changes": "Refactoring >100 lines → /refactor-strict",
				"critical_components": "Changes affecting multiple main apps → *-strict",
				"uncertain_scope": "User unsure about approach → *-strict"
			},
			"recommendations": {
				"simple_fixes": "Known patterns, <50 lines → streamlined mode",
				"routine_work": "Experienced developers, familiar components → streamlined mode",
				"learning": "New team members → strict mode for methodology learning",
				"production": "Critical systems, deployment pipeline → strict mode"
			}
		}
	}
}