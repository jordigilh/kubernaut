// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	interfaces "github.com/jordigilh/kubernaut/pkg/testutil/interfaces"
	mock "github.com/stretchr/testify/mock"

	types "github.com/jordigilh/kubernaut/pkg/shared/types"
)

// AIResponseProcessor is an autogenerated mock type for the AIResponseProcessor type
type AIResponseProcessor struct {
	mock.Mock
}

// AnalyzeConfidence provides a mock function with given fields: ctx, recommendation
func (_m *AIResponseProcessor) AnalyzeConfidence(ctx context.Context, recommendation *types.EnhancedActionRecommendation) (*interfaces.ConfidenceAnalysis, error) {
	ret := _m.Called(ctx, recommendation)

	if len(ret) == 0 {
		panic("no return value specified for AnalyzeConfidence")
	}

	var r0 *interfaces.ConfidenceAnalysis
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.EnhancedActionRecommendation) (*interfaces.ConfidenceAnalysis, error)); ok {
		return rf(ctx, recommendation)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.EnhancedActionRecommendation) *interfaces.ConfidenceAnalysis); ok {
		r0 = rf(ctx, recommendation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interfaces.ConfidenceAnalysis)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.EnhancedActionRecommendation) error); ok {
		r1 = rf(ctx, recommendation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnhanceRecommendation provides a mock function with given fields: ctx, recommendation, _a2
func (_m *AIResponseProcessor) EnhanceRecommendation(ctx context.Context, recommendation *types.EnhancedActionRecommendation, _a2 map[string]interface{}) (*types.EnhancedActionRecommendation, error) {
	ret := _m.Called(ctx, recommendation, _a2)

	if len(ret) == 0 {
		panic("no return value specified for EnhanceRecommendation")
	}

	var r0 *types.EnhancedActionRecommendation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.EnhancedActionRecommendation, map[string]interface{}) (*types.EnhancedActionRecommendation, error)); ok {
		return rf(ctx, recommendation, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.EnhancedActionRecommendation, map[string]interface{}) *types.EnhancedActionRecommendation); ok {
		r0 = rf(ctx, recommendation, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.EnhancedActionRecommendation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.EnhancedActionRecommendation, map[string]interface{}) error); ok {
		r1 = rf(ctx, recommendation, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProcessingMetrics provides a mock function with no fields
func (_m *AIResponseProcessor) GetProcessingMetrics() (*interfaces.ProcessingMetrics, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProcessingMetrics")
	}

	var r0 *interfaces.ProcessingMetrics
	var r1 error
	if rf, ok := ret.Get(0).(func() (*interfaces.ProcessingMetrics, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *interfaces.ProcessingMetrics); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interfaces.ProcessingMetrics)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessResponse provides a mock function with given fields: ctx, rawResponse, originalAlert
func (_m *AIResponseProcessor) ProcessResponse(ctx context.Context, rawResponse string, originalAlert types.Alert) (*types.EnhancedActionRecommendation, error) {
	ret := _m.Called(ctx, rawResponse, originalAlert)

	if len(ret) == 0 {
		panic("no return value specified for ProcessResponse")
	}

	var r0 *types.EnhancedActionRecommendation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.Alert) (*types.EnhancedActionRecommendation, error)); ok {
		return rf(ctx, rawResponse, originalAlert)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, types.Alert) *types.EnhancedActionRecommendation); ok {
		r0 = rf(ctx, rawResponse, originalAlert)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.EnhancedActionRecommendation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, types.Alert) error); ok {
		r1 = rf(ctx, rawResponse, originalAlert)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateRecommendation provides a mock function with given fields: ctx, recommendation
func (_m *AIResponseProcessor) ValidateRecommendation(ctx context.Context, recommendation *types.EnhancedActionRecommendation) (*types.LLMValidationResult, error) {
	ret := _m.Called(ctx, recommendation)

	if len(ret) == 0 {
		panic("no return value specified for ValidateRecommendation")
	}

	var r0 *types.LLMValidationResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.EnhancedActionRecommendation) (*types.LLMValidationResult, error)); ok {
		return rf(ctx, recommendation)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.EnhancedActionRecommendation) *types.LLMValidationResult); ok {
		r0 = rf(ctx, recommendation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.LLMValidationResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.EnhancedActionRecommendation) error); ok {
		r1 = rf(ctx, recommendation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAIResponseProcessor creates a new instance of AIResponseProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAIResponseProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *AIResponseProcessor {
	mock := &AIResponseProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
