---
alwaysApply: true
description: "Mandatory project guidelines and development principles for kubernaut"
---

# Project Guidelines - Mandatory Development Principles

## üö® **ALWAYS FOLLOW THESE PRINCIPLES**

### Critical Decision Process
**MANDATORY**: Ask for input on ALL critical decisions including:
- Architecture changes and design patterns
- New dependencies or external integrations
- Performance trade-offs and optimization decisions
- Security implementations and access controls
- Refactoring that affects system complexity

**Format**: Provide recommendation with detailed justification when asking for input.

### Business Requirements Mandate
**MANDATORY**: Every code change must be backed by at least ONE business requirement (BR-XXX-XXX format).
- All tests must map to specific business requirements
- All implementation code must serve documented business needs
- No speculative or "nice to have" code without business backing
- Business requirements dictate functionality; technical patterns enable business logic

### **TDD Business Requirements Completeness**
**MANDATORY**: When implementing functionality for specific business requirements ‚Üí ALL targeted requirements MUST be covered by TDD
- **SCOPE**: Only the business requirements being implemented in THIS development cycle
- **NOT**: All business requirements in the entire project
- **VALIDATION**: Use `./scripts/validate-tdd-completeness.sh "BR-001,BR-002,BR-003"`

## üß™ **Testing Methodology - MANDATORY COMPLIANCE**

**MANDATORY**: Follow complete Test-Driven Development (TDD) methodology per [03-testing-strategy.mdc](mdc:.cursor/rules/03-testing-strategy.mdc)

### Core Testing Requirements
- **TDD Workflow**: Complete RED-GREEN-REFACTOR cycle (all phases mandatory)
- **Business Logic Focus**: Test real business components with external mocks only
- **Business Requirements**: All tests must map to specific BR-XXX-XXX requirements
- **Anti-Pattern Detection**: Automated validation via `scripts/cursor-rule-validator.sh`

**CRITICAL**: TDD is INCOMPLETE without all three phases. Skipping REFACTOR phase violates mandatory requirements.

**Detailed Implementation**: See [03-testing-strategy.mdc](mdc:.cursor/rules/03-testing-strategy.mdc) for comprehensive TDD workflow, pyramid strategy, mock usage guidelines, and testing anti-patterns.

## üíª **Code Quality Standards**

### Error Handling - MANDATORY
- **ALWAYS** handle errors, never ignore them
- **ALWAYS** add log entry for every error
- Use structured error types from [internal/errors/](mdc:internal/errors/)
- Follow error handling patterns in [02-go-coding-standards.mdc](mdc:.cursor/rules/02-go-coding-standards.mdc)

### Type System Guidelines
- **AVOID** using `any` or `interface{}` unless absolutely necessary
- **ALWAYS** use structured field values with specific types
- **AVOID** local type definitions to resolve import cycles
- Use shared types from [pkg/shared/types/](mdc:pkg/shared/types/) instead

### Code Organization
- **AVOID** duplication - REUSE existing code through refactoring
- **ENSURE** functionality aligns with business requirements
- **INTEGRATE** all new business code with main codebase
- **AVOID** duplicating structure names - use unique, business-aligned names

## üîß **Development Principles**

### Code Integration Requirements - MANDATORY
- **MANDATORY**: Integrate all new business code with main code
- Remove any code not backed by business requirements
- Ensure seamless integration with existing architecture
- Follow patterns established in [01-project-structure.mdc](mdc:.cursor/rules/01-project-structure.mdc)
- **DETAILED GUIDANCE**: See [07-business-code-integration.mdc](mdc:.cursor/rules/07-business-code-integration.mdc) for comprehensive integration patterns, validation procedures, and assessment templates

## üö® **MANDATORY REAL-TIME INTEGRATION CHECKPOINTS**

### **CHECKPOINT 1: Before Creating ANY New Type**
**TRIGGER**: About to type `type NewComponent struct` or `func NewComponent`
**MANDATORY ACTION**:
```bash
# HALT: Run this command BEFORE creating new type
grep -r "NewComponent\|ComponentName" cmd/ pkg/workflow/ pkg/processor/ pkg/api/
# RULE: If ZERO results, ask "Why isn't this enhancing existing code?"
```

### **CHECKPOINT 2: During TDD GREEN Phase**
**TRIGGER**: Tests are passing (GREEN phase complete)
**MANDATORY ACTION**:
```bash
# HALT: Verify integration BEFORE proceeding to REFACTOR
find cmd/ -name "*.go" -exec grep -l "YourNewComponent" {} \;
# RULE: Must show at least ONE main application file, or STOP and integrate
```

### **CHECKPOINT 3: After ANY Sophisticated Enhancement**
**TRIGGER**: Adding complex algorithms, ML features, or sophisticated logic
**MANDATORY ACTION**:
```bash
# HALT: Check main app instantiation
grep -r "New.*Optimizer\|New.*Engine\|New.*Builder" cmd/ --include="*.go"
# RULE: New sophisticated code MUST appear in main application startup
```

### **AUTOMATIC VIOLATION DETECTION**
Add to pre-commit hook:
```bash
#!/bin/bash
# Auto-detect orphaned business code
SOPHISTICATED_TYPES=$(grep -r "type.*Optimizer\|type.*Engine\|type.*Analyzer" pkg/ --include="*.go" | grep -v "_test.go")
for type_def in $SOPHISTICATED_TYPES; do
    TYPE_NAME=$(echo $type_def | grep -o "type [A-Za-z]*" | cut -d' ' -f2)
    MAIN_USAGE=$(grep -r "$TYPE_NAME" cmd/ --include="*.go" | wc -l)
    if [ "$MAIN_USAGE" -eq 0 ]; then
        echo "‚ùå VIOLATION: Sophisticated type $TYPE_NAME not integrated in main applications"
        exit 1
    fi
done
```

### Quality Assurance - ENHANCED
- **ENSURE** no compilation or lint errors (golangci-lint)
- **üÜï MANDATORY INTERFACE VALIDATION**: Follow [09-interface-method-validation.mdc](mdc:.cursor/rules/09-interface-method-validation.mdc) before ANY interface usage
- **üÜï IMMEDIATE COMPILATION CHECK**: Run `go build` after ANY interface method calls
- **üÜï TYPE SAFETY VERIFICATION**: Validate all type conversions and constructor usage
- **AVOID** race conditions and memory leaks
- **USE** configuration settings for environment setup (never hardcode)
- **AVOID** backwards compatibility support (pre-release product)

## üéØ **Completion Requirements**

### Post-Development Checklist - MANDATORY
After completing any development task:

1. **üÜï Interface Validation Compliance**: Verify all interface usage follows [09-interface-method-validation.mdc](mdc:.cursor/rules/09-interface-method-validation.mdc)
2. **Build Validation**: Triage any build or lint errors derived from changes to the code, such as from a refactoring activity
3. **üÜï Compilation Verification**: Run `go build` and `golangci-lint` on all modified files
4. **Lint Compliance**: No new lint errors (unusedparam, unusedfunc, etc.)
5. **üÜï Type Safety Verification**: Validate all type conversions, constructor usage, and method signatures
6. **Business Integration Verification**: Complete integration verification per [07-business-code-integration.mdc](mdc:.cursor/rules/07-business-code-integration.mdc)
7. **Enhancement Proposals**: Suggest improvements with ‚â•60% confidence level

### Confidence Assessment Format - REQUIRED
Provide BOTH:
- **Simple Percentage**: 60-100% confidence rating
- **Detailed Justification**: Including risks, assumptions, and validation approach

Example:
```
Confidence Assessment: 85%
Justification: Implementation follows established patterns in pkg/workflow/engine/
and integrates cleanly with existing HolmesGPT client. Risk: Minor performance
impact on high-alert scenarios. Validation: Unit tests cover 90% of edge cases.
```

## üìã **Anti-Patterns to AVOID**

### Testing Anti-Patterns
**COMPREHENSIVE TESTING ANTI-PATTERNS**: See [03-testing-strategy.mdc](mdc:.cursor/rules/03-testing-strategy.mdc) for detailed testing anti-patterns including:
- Panic-only testing, null-testing, static data testing
- Library testing, implementation testing, mock overuse
- Automated detection patterns and enforcement

### Development Anti-Patterns
- **HARDCODED ENVIRONMENT**: Configuration should be externalized
- **BACKWARDS COMPATIBILITY**: No legacy support needed pre-release
- **ASSUMPTION-DRIVEN**: Making decisions without business requirement backing
- **LOCAL TYPE DEFINITIONS**: For import cycle resolution
- **STALE BUSINESS CODE**: Code that complies with the business requirements but is not used by the main business code, only by tests.
- **INTEGRATION ANTI-PATTERNS**: See [07-business-code-integration.mdc](mdc:.cursor/rules/07-business-code-integration.mdc) for comprehensive list of integration anti-patterns to avoid

## üó£Ô∏è **Communication Standards**

### Technical Communication
- **Be clear and realistic** - avoid superlatives and hyperboles
- **Provide concrete examples** with business context
- **Reference specific business requirements** in discussions
- **Justify technical decisions** with business impact analysis

### Code Documentation
- Document business purpose and requirements served
- Include confidence assessments in significant changes
- Reference related business requirements in code comments
- Follow documentation standards in [06-documentation-standards.mdc](mdc:.cursor/rules/06-documentation-standards.mdc)

## üîó **Integration with Other Rules**

This rule establishes mandatory principles that complement:
- [01-project-structure.mdc](mdc:.cursor/rules/01-project-structure.mdc) - Architecture navigation
- [02-go-coding-standards.mdc](mdc:.cursor/rules/02-go-coding-standards.mdc) - Technical implementation patterns
- [03-testing-strategy.mdc](mdc:.cursor/rules/03-testing-strategy.mdc) - Testing framework and strategy
- [04-ai-ml-guidelines.mdc](mdc:.cursor/rules/04-ai-ml-guidelines.mdc) - AI/ML specific patterns
- [05-kubernetes-safety.mdc](mdc:.cursor/rules/05-kubernetes-safety.mdc) - Kubernetes operational safety
- [07-business-code-integration.mdc](mdc:.cursor/rules/07-business-code-integration.mdc) - Detailed business code integration patterns and validation
- [08-testing-anti-patterns.mdc](mdc:.cursor/rules/08-testing-anti-patterns.mdc) - Critical testing anti-patterns to avoid
- [09-interface-method-validation.mdc](mdc:.cursor/rules/09-interface-method-validation.mdc) - Interface and method validation before code generation

**Priority**: When conflicts arise between technical best practices and project guidelines, ask for input and provide recommendation with justification.

## ‚ö° **Quick Reference Checklist**

Before any code submission:
- [ ] Business requirement mapped (BR-XXX-XXX)
- [ ] **üß™ TDD Methodology**: Complete RED-GREEN-REFACTOR cycle per [03-testing-strategy.mdc](mdc:.cursor/rules/03-testing-strategy.mdc)
- [ ] **üÜï Interface Validation**: All interface usage validated per [09-interface-method-validation.mdc](mdc:.cursor/rules/09-interface-method-validation.mdc)
- [ ] All errors handled and logged
- [ ] **üÜï Compilation Check**: `go build` passes on all modified files
- [ ] **üÜï Lint Check**: `golangci-lint` passes with no new errors
- [ ] **üÜï Type Safety**: All type conversions and constructors validated
- [ ] **Business Integration Verification**: Complete per [07-business-code-integration.mdc](mdc:.cursor/rules/07-business-code-integration.mdc)
- [ ] Business Integration Assessment provided
- [ ] Confidence assessment provided
- [ ] Critical decisions escalated if needed

**DETAILED TDD CHECKLIST**: See [03-testing-strategy.mdc](mdc:.cursor/rules/03-testing-strategy.mdc) for comprehensive RED-GREEN-REFACTOR phase verification requirements.