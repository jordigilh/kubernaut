apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubernaut
  namespace: e2e-test
  labels:
    app.kubernetes.io/name: kubernaut
    app.kubernetes.io/component: controller
    app.kubernetes.io/part-of: kubernaut
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kubernaut
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kubernaut
        app.kubernetes.io/component: controller
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: kubernaut
      containers:
        - name: kubernaut
          image: quay.io/jordigilh/kubernaut:latest
          imagePullPolicy: Always
          ports:
            - name: webhook
              containerPort: 8080
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
            - name: health
              containerPort: 8081
              protocol: TCP
          env:
            # SLM Configuration
            - name: SLM_PROVIDER
              value: "localai"
            - name: SLM_ENDPOINT
              value: "http://localai-service:8080"
            - name: SLM_MODEL
              value: "granite-3.0-8b-instruct"
            - name: SLM_TEMPERATURE
              value: "0.3"
            - name: SLM_MAX_TOKENS
              value: "500"

            # Application Configuration
            - name: LOG_LEVEL
              value: "info"
            - name: WEBHOOK_PORT
              value: "8080"
            - name: METRICS_PORT
              value: "9090"

            # OpenShift Configuration
            - name: OPENSHIFT_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace

            # Secrets
            - name: WEBHOOK_AUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: kubernaut-secrets
                  key: webhook-auth-token
                  optional: true
            - name: SLM_API_KEY
              valueFrom:
                secretKeyRef:
                  name: kubernaut-secrets
                  key: slm-api-key
                  optional: true
          volumeMounts:
            - name: config
              mountPath: /app/config
              readOnly: true
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /health
              port: webhook
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /ready
              port: webhook
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /health
              port: webhook
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 10
      volumes:
        - name: config
          configMap:
            name: kubernaut-config
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: kubernaut
                topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: kubernaut-service
  namespace: e2e-test
  labels:
    app.kubernetes.io/name: kubernaut
    app.kubernetes.io/component: controller
spec:
  selector:
    app.kubernetes.io/name: kubernaut
  ports:
    - name: webhook
      port: 8080
      targetPort: webhook
      protocol: TCP
    - name: metrics
      port: 9090
      targetPort: metrics
      protocol: TCP
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: kubernaut-webhook
  namespace: e2e-test
  labels:
    app.kubernetes.io/name: kubernaut
    app.kubernetes.io/component: webhook
  annotations:
    # For external access through ingress/route
    service.beta.openshift.io/serving-cert-secret-name: webhook-tls
spec:
  selector:
    app.kubernetes.io/name: kubernaut
  ports:
    - name: https
      port: 443
      targetPort: webhook
      protocol: TCP
    - name: http
      port: 80
      targetPort: webhook
      protocol: TCP
  type: LoadBalancer  # Change to ClusterIP if using ingress